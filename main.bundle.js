(()=>{"use strict";var e={447:(e,t,a)=>{a.r(t)}},t={};function a(s){var i=t[s];if(void 0!==i)return i.exports;var n=t[s]={exports:{}};return e[s](n,n.exports,a),n.exports}a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{const e={attributes:{bra:"CONAN.attributes.bra",agi:"CONAN.attributes.agi",awa:"CONAN.attributes.awa",coo:"CONAN.attributes.coo",int:"CONAN.attributes.int",wil:"CONAN.attributes.wil",per:"CONAN.attributes.per"},attributeTitles:{bra:"CONAN.attributeTitles.bra",agi:"CONAN.attributeTitles.agi",awa:"CONAN.attributeTitles.awa",coo:"CONAN.attributeTitles.coo",int:"CONAN.attributeTitles.int",wil:"CONAN.attributeTitles.wil",per:"CONAN.attributeTitles.per"},ASSIST_2D20_DICE:1,BASE_2D20_DICE:2,MAX_2D20_DICE:5,MAX_2D20_PURCHASE:3,skills:{acr:"CONAN.skills.acr",mel:"CONAN.skills.mel",ste:"CONAN.skills.ste",ins:"CONAN.skills.ins",obs:"CONAN.skills.obs",sur:"CONAN.skills.sur",thi:"CONAN.skills.thi",ath:"CONAN.skills.ath",res:"CONAN.skills.res",par:"CONAN.skills.par",ran:"CONAN.skills.ran",sai:"CONAN.skills.sai",alc:"CONAN.skills.alc",cra:"CONAN.skills.cra",hea:"CONAN.skills.hea",lin:"CONAN.skills.lin",lor:"CONAN.skills.lor",war:"CONAN.skills.war",ani:"CONAN.skills.ani",com:"CONAN.skills.com",cou:"CONAN.skills.cou",per:"CONAN.skills.per",soc:"CONAN.skills.soc",dis:"CONAN.skills.dis",sor:"CONAN.skills.sor"},skillAttributeMap:{acr:"agi",mel:"agi",ste:"agi",ins:"awa",obs:"awa",sur:"awa",thi:"awa",ath:"bra",res:"bra",par:"coo",ran:"coo",sai:"coo",alc:"int",cra:"int",hea:"int",lin:"int",lor:"int",war:"int",ani:"per",com:"per",cou:"per",per:"per",soc:"per",dis:"wil",sor:"wil"},enchantmentExplodingItems:{flashPaper:"CONAN.enchantmentExplodingItems.fla",smallFireworks:"CONAN.enchantmentExplodingItems.sma",loudFireworks:"CONAN.enchantmentExplodingItems.lou",largeFireworks:"CONAN.enchantmentExplodingItems.lar",smallExplosives:"CONAN.enchantmentExplodingItems.sme",largeExplosives:"CONAN.enchantmentExplodingItems.lex"},enchantmentStrengths:{weak:"CONAN.enchantmentStrengths.wea",average:"CONAN.enchantmentStrengths.ave",potent:"CONAN.enchantmentStrengths.pot",dangerous:"CONAN.enchantmentStrengths.dan",extraordinary:"CONAN.enchantmentStrengths.ext",devastationg:"CONAN.enchantmentStrengths.dev"},enchantmentBlindingStrengths:{regular:"CONAN.enchantmentBlindingStrengths.reg",dry:"CONAN.enchantmentBlindingStrengths.dry",fine:"CONAN.enchantmentBlindingStrengths.fin",perfumed:"CONAN.enchantmentBlindingStrengths.per",burning:"CONAN.enchantmentBlindingStrengths.bur"},enchantmentTalismanTypes:{hamsa:"CONAN.enchantmentTalismanTypes.ham",chasme:"CONAN.enchantmentTalismanTypes.cha",pictish:"CONAN.enchantmentTalismanTypes.pic",nazar:"CONAN.enchantmentTalismanTypes.naz",animal:"CONAN.enchantmentTalismanTypes.ani"},enchantmentTypes:{explodingPowder:"CONAN.enchantmentTypes.exp",blindingPowder:"CONAN.enchantmentTypes.bli",burningLiquid:"CONAN.enchantmentTypes.bur",reinforcedFabric:"CONAN.enchantmentTypes.rei",upasGlass:"CONAN.enchantmentTypes.upa",talisman:"CONAN.enchantmentTypes.tal",lotusPollen:"CONAN.enchantmentTypes.lot"},upasGlassSizes:{resilient:"CONAN.upasGlassSizes.res",strengthened:"CONAN.upasGlassSizes.str",unbreakable:"CONAN.upasGlassSizes.unb"},enchantmentVolatilities:{burningAlcohol:"CONAN.enchantmentVolatilities.bur",explodingLiquor:"CONAN.enchantmentVolatilities.exp",volatileSpirits:"CONAN.enchantmentVolatilities.vol",hellishBrimstone:"CONAN.enchantmentVolatilities.hel"},expertiseFields:{mov:"CONAN.expertiseFields.mov",cmb:"CONAN.expertiseFields.cmb",frt:"CONAN.expertiseFields.frt",knw:"CONAN.expertiseFields.knw",scl:"CONAN.expertiseFields.scl",sns:"CONAN.expertiseFields.sns"},expertiseAttributeMap:{mov:"agi",cmb:"agi",frt:"bra",knw:"int",scl:"per",sns:"awa"},rollDifficultyLevels:{0:"CONAN.skillRollDifficultyLevels.0",1:"CONAN.skillRollDifficultyLevels.1",2:"CONAN.skillRollDifficultyLevels.2",3:"CONAN.skillRollDifficultyLevels.3",4:"CONAN.skillRollDifficultyLevels.4",5:"CONAN.skillRollDifficultyLevels.5"},skillRollResourceSpends:{momentum:"CONAN.skillRollResourceSpends.mome",doom:"CONAN.skillRollResourceSpends.doom"},rollResults:{success:"CONAN.skillRollSuccess",failure:"CONAN.skillRollFailure"},enchantmentIngredients:{0:"0",1:"1",2:"2",3:"3",4:"4",5:"5",6:"6",7:"7",8:"8",9:"9"},attacks:{weapon:"CONAN.attackTypes.weapon",display:"CONAN.attackTypes.display"},attackTypes:{melee:"CONAN.attackTypes.melee",ranged:"CONAN.attackTypes.ranged",threaten:"CONAN.attackTypes.threaten"},damageTypes:{mental:"CONAN.damageTypes.mental",physical:"CONAN.damageTypes.physical"},npcActionTypes:{abilities:"CONAN.npcActionTypes.abilities",doom:"CONAN.npcActionTypes.doom"},npcTraits:{horror:"CONAN.npcCategories.horror",undead:"CONAN.npcCategories.undead"},npcAttackTypes:{melee:"CONAN.npcAttackTypes.melee",ranged:"CONAN.npcAttackTypes.ranged",threaten:"CONAN.npcAttackTypes.threaten"},npcTypes:{minion:"CONAN.npcCategories.minion",toughened:"CONAN.npcCategories.toughened",nemesis:"CONAN.npcCategories.nemesis"},availabilityTypes:{1:"CONAN.skillRollDifficultyLevels.1",2:"CONAN.skillRollDifficultyLevels.2",3:"CONAN.skillRollDifficultyLevels.3",4:"CONAN.skillRollDifficultyLevels.4",5:"CONAN.skillRollDifficultyLevels.5"},conditionTypes:{blind:"CONAN.conditions.bli",burningx:"CONAN.conditions.bur",dazed:"CONAN.conditions.daz",deaf:"CONAN.conditions.dea",guardBroken:"CONAN.conditions.gua",hindered:"CONAN.conditions.hin",poisoned:"CONAN.conditions.poi",prone:"CONAN.conditions.pro",staggered:"CONAN.conditions.sta"},naturesTypes:{cautious:"CONAN.natures.cautious",curious:"CONAN.natures.curious",inspirational:"CONAN.natures.inspirational",learned:"CONAN.natures.learned",practical:"CONAN.natures.practical",scheming:"CONAN.natures.scheming",sneaky:"CONAN.natures.sneaky",stoic:"CONAN.natures.stoic",supportive:"CONAN.natures.supportive",wrathful:"CONAN.natures.wrathful"},coverageTypes:{head:"CONAN.coverage.head",torso:"CONAN.coverage.torso",larm:"CONAN.coverage.larm",rarm:"CONAN.coverage.rarm",lleg:"CONAN.coverage.lleg",rleg:"CONAN.coverage.rleg"},armorTypes:{heavyCloth:"CONAN.armorTypes.heavycloth",lightArmor:"CONAN.armorTypes.lightarmor",heavyArmor:"CONAN.armorTypes.heavyarmor",veryHeavyArmor:"CONAN.armorTypes.vheavyarmor"},armorQualities:{brittle:"CONAN.qualities.armor.brit",bulky:"CONAN.qualities.armor.bulk",cool:"CONAN.qualities.armor.cool",couragex:"CONAN.qualities.armor.cour",fragile:"CONAN.qualities.armor.frag",heavy:"CONAN.qualities.armor.heav",intimidating:"CONAN.qualities.armor.inti",noisy:"CONAN.qualities.armor.nois",mentalPiercingx:"CONAN.qualities.armor.apie",vheavy:"CONAN.qualities.armor.very",warm:"CONAN.qualities.armor.warm"},actionTypes:{passive:"CONAN.actionPassive",free:"CONAN.actionFree",minor:"CONAN.actionMinor",standard:"CONAN.actionStandard",reaction:"CONAN.actionReaction"},freeActions:{adjust:"CONAN.actions.free.adj",dropItem:"CONAN.actions.free.dro",dropProne:"CONAN.actions.free.pro",simpleTask:"CONAN.actions.free.sim",speak:"CONAN.actions.free.spe"},minorActions:{clear:"CONAN.actions.minor.cle",drawItem:"CONAN.actions.minor.dra",movement:"CONAN.actions.minor.mov",regainGuard:"CONAN.actions.minor.reg",stand:"CONAN.actions.minor.sta"},standardActions:{assist:"CONAN.actions.standard.ass",attack:"CONAN.actions.standard.att",brace:"CONAN.actions.standard.bra",exploit:"CONAN.actions.standard.exp",pass:"CONAN.actions.standard.pas",ready:"CONAN.actions.standard.rea",recover:"CONAN.actions.standard.rec",skillTest:"CONAN.actions.standard.ski",sprint:"CONAN.actions.standard.spr",treatment:"CONAN.actions.standard.tre",withdraw:"CONAN.actions.standard.wit"},reactionActions:{defend:"CONAN.actions.reaction.def",protect:"CONAN.actions.reaction.pro",retaliate:"CONAN.actions.reaction.ret"},actionCategories:{defensive:"CONAN.actionCategories.def",offensive:"CONAN.actionCategories.off",interaction:"CONAN.actionCategories.int",movement:"CONAN.actionCategories.mov"},actionCounts:{1:"CONAN.actionCounts.1",2:"CONAN.actionCounts.2","1r":"CONAN.actionCounts.1r"},kitTypes:{facility:"CONAN.kitTypes.fac",kit:"CONAN.kitTypes.kit",library:"CONAN.kitTypes.lib",reload:"CONAN.kitTypes.rel",resource:"CONAN.kitTypes.res",tool:"CONAN.kitTypes.too"},kitUses:{1:"1",2:"2",3:"3",4:"4",5:"5",6:"6",inf:"&infin;"},lotusPollenColors:{black:"CONAN.lotusPollenColors.black",purple:"CONAN.lotusPollenColors.purple",yellow:"CONAN.lotusPollenColors.yellow",green:"CONAN.lotusPollenColors.green",gray:"CONAN.lotusPollenColors.gray",golden:"CONAN.lotusPollenColors.golden"},lotusPollenDifficulty:{per:"CONAN.lotusPollenDifficulty"},lotusPollenForms:{gas:"CONAN.lotusPollenForms.gas",powder:"CONAN.lotusPollenForms.pow",liquid:"CONAN.lotusPollenForms.liq"},lotusPollenUses:{opiate:"CONAN.lotusPollenUses.opi",poison:"CONAN.lotusPollenUses.poi",paralytic:"CONAN.lotusPollenUses.par",hallucinogenic:"CONAN.lotusPollenUses.hal",enchantment:"CONAN.lotusPollenUses.enc",anger:"CONAN.lotusPollenUses.ang",madness:"CONAN.lotusPollenUses.mad"},languages:{afghuli:"CONAN.languages.afgh",argossean:"CONAN.languages.argo",aquilonian:"CONAN.languages.aqui",brythunian:"CONAN.languages.bryt",corinthian:"CONAN.languages.cori",cimmerian:"CONAN.languages.cimm",darfari:"CONAN.languages.darf",hyperborean:"CONAN.languages.hype",hyrkanian:"CONAN.languages.hyrk",iranistani:"CONAN.languages.iran",keshani:"CONAN.languages.kesh",kothic:"CONAN.languages.koth",kushite:"CONAN.languages.kush",nemedian:"CONAN.languages.neme",nordheimer:"CONAN.languages.nord",ophirian:"CONAN.languages.ophi",punt:"CONAN.languages.punt",shemitish:"CONAN.languages.shem",stygian:"CONAN.languages.styg",turanian:"CONAN.languages.tura",vendhyan:"CONAN.languages.vend",zamorian:"CONAN.languages.zamo",zembabwein:"CONAN.languages.zemb",zingaran:"CONAN.languages.zing"},statusEffects:[{icon:"systems/conan2d20/assets/icons/conditions/blind.png",id:"blind",label:"CONAN.conditions.bli",title:"CONAN.conditionDescriptionBlin",flags:{conan2d20:{trigger:"endRound",value:null}}},{icon:"systems/conan2d20/assets/icons/conditions/burningx.png",id:"burningx",label:"CONAN.conditions.bur",title:"CONAN.conditionDescriptionBurn",flags:{conan2d20:{trigger:"endRound",value:1}}},{icon:"systems/conan2d20/assets/icons/conditions/dazed.png",id:"dazed",label:"CONAN.conditions.daz",title:"CONAN.conditionDescriptionDaze",flags:{conan2d20:{trigger:"endRound",value:null}}},{icon:"systems/conan2d20/assets/icons/conditions/deaf.png",id:"deaf",label:"CONAN.conditions.dea",title:"CONAN.conditionDescriptionDeaf",flags:{conan2d20:{trigger:"endRound",value:null}}},{icon:"systems/conan2d20/assets/icons/conditions/guardbreak.png",id:"guardBroken",label:"CONAN.conditions.gua",title:"CONAN.conditionDescriptionGuar",flags:{conan2d20:{trigger:"endRound",value:null}}},{icon:"systems/conan2d20/assets/icons/conditions/hindered.png",id:"hindered",label:"CONAN.conditions.hin",title:"CONAN.conditionDescriptionHind",flags:{conan2d20:{trigger:"endRound",value:null}}},{icon:"systems/conan2d20/assets/icons/conditions/poisoned.png",id:"poisoned",label:"CONAN.conditions.poi",title:"CONAN.conditionDescriptionPois",flags:{conan2d20:{trigger:"endRound",value:null}}},{icon:"systems/conan2d20/assets/icons/conditions/prone.png",id:"prone",label:"CONAN.conditions.pro",title:"CONAN.conditionDescriptionPron",flags:{conan2d20:{trigger:"endRound",value:null}}},{icon:"systems/conan2d20/assets/icons/conditions/staggered.png",id:"staggered",label:"CONAN.conditions.sta",title:"CONAN.conditionDescriptionStag",flags:{conan2d20:{trigger:"endRound",value:null}}}],talentRanks:{1:1,2:2,3:3},transpoAnimals:{one:"CONAN.transpoAnimals.1",onep:"CONAN.transpoAnimals.1p",two:"CONAN.transpoAnimals.2",twop:"CONAN.transpoAnimals.2p",four:"CONAN.transpoAnimals.4",fourp:"CONAN.transpoAnimals.4p"},transpoBoatTypes:{bireme:"CONAN.transpoBoatTypes.bireme",canoe:"CONAN.transpoBoatTypes.canoe",carrack:"CONAN.transpoBoatTypes.carrack",cog:"CONAN.transpoBoatTypes.cog",galley:"CONAN.transpoBoatTypes.galley",gondola:"CONAN.transpoBoatTypes.gondola",kayak:"CONAN.transpoBoatTypes.kayak",longboat:"CONAN.transpoBoatTypes.longboat",longship:"CONAN.transpoBoatTypes.longship",raft:"CONAN.transpoBoatTypes.raft"},transpoCapabilities:{p:"CONAN.transpoCapabilities.p",mp:"CONAN.transpoCapabilities.mp",bmp:"CONAN.transpoCapabilities.bmp"},transpoCartTypes:{carriage:"CONAN.transpoCartTypes.carriage",cart:"CONAN.transpoCartTypes.cart",hchar:"CONAN.transpoCartTypes.hchar",lchar:"CONAN.transpoCartTypes.lchar",litter:"CONAN.transpoCartTypes.litter",wagon:"CONAN.transpoCartTypes.wagon",pwagon:"CONAN.transpoCartTypes.pwagon"},transpoCategories:{mounts:"CONAN.transpoCategories.mounts",carts:"CONAN.transpoCategories.carts",boats:"CONAN.transpoCategories.boats"},transpoMountTypes:{buffalo:"CONAN.transpoMountTypes.buffalo",camel:"CONAN.transpoMountTypes.camel",donkey:"CONAN.transpoMountTypes.donkey",dhorse:"CONAN.transpoMountTypes.dhorse",rhorse:"CONAN.transpoMountTypes.rhorse",whorse:"CONAN.transpoMountTypes.whorse"},talentTypes:{homeland:"CONAN.talentTypes.homeland",caste:"CONAN.talentTypes.caste",bloodline:"CONAN.talentTypes.bloodline",education:"CONAN.talentTypes.education",nature:"CONAN.talentTypes.nature",archetype:"CONAN.talentTypes.archetype",skill:"CONAN.talentTypes.skill",other:"CONAN.talentTypes.other"},weaponQualities:{area:"CONAN.qualities.weapons.area",backlashx:"CONAN.qualities.weapons.back",blessedx:"CONAN.qualities.weapons.bles",blinding:"CONAN.qualities.weapons.blin",brilliant:"CONAN.qualities.weapons.bril",cavalryx:"CONAN.qualities.weapons.cava",cursedx:"CONAN.qualities.weapons.curs",enchantedx:"CONAN.qualities.weapons.ench",ensorcelledx:"CONAN.qualities.weapons.enso",familiar:"CONAN.qualities.weapons.fami",fearsomex:"CONAN.qualities.weapons.fear",fragile:"CONAN.qualities.weapons.frag",grappling:"CONAN.qualities.weapons.grap",hiddenx:"CONAN.qualities.weapons.hidd",improvised:"CONAN.qualities.weapons.impr",intriguingx:"CONAN.qualities.weapons.intr",incendiaryx:"CONAN.qualities.weapons.ince",intense:"CONAN.qualities.weapons.inte",keen:"CONAN.qualities.weapons.keen",knockdown:"CONAN.qualities.weapons.knoc",maledictionx:"CONAN.qualities.weapons.male",nonlethal:"CONAN.qualities.weapons.nonl",pairedx:"CONAN.qualities.weapons.pair",parrying:"CONAN.qualities.weapons.parr",patron:"CONAN.qualities.weapons.patr",persistentx:"CONAN.qualities.weapons.pers",piercingx:"CONAN.qualities.weapons.pier",purposex:"CONAN.qualities.weapons.purp",regalx:"CONAN.qualities.weapons.rega",sanguinex:"CONAN.qualities.weapons.sang",shieldx:"CONAN.qualities.weapons.shie",spreadx:"CONAN.qualities.weapons.spre",stun:"CONAN.qualities.weapons.stun",subtlex:"CONAN.qualities.weapons.subt",thrown:"CONAN.qualities.weapons.thro",trappedx:"CONAN.qualities.weapons.trap",unforgivingx:"CONAN.qualities.weapons.unfo",viciousx:"CONAN.qualities.weapons.vici",volley:"CONAN.qualities.weapons.voll",weak:"CONAN.qualities.weapons.weak"},weaponGroups:{axe:"CONAN.weaponGroup.axe",bow:"CONAN.weaponGroup.bow",club:"CONAN.weaponGroup.clu",crossbow:"CONAN.weaponGroup.cro",dagger:"CONAN.weaponGroup.dag",flail:"CONAN.weaponGroup.fla",flexible:"CONAN.weaponGroup.fle",hidden:"CONAN.weaponGroup.hid",improvised:"CONAN.weaponGroup.imp",polearm:"CONAN.weaponGroup.pol",shield:"CONAN.weaponGroup.shi",sling:"CONAN.weaponGroup.sli",sword:"CONAN.weaponGroup.swo",spear:"CONAN.weaponGroup.spe"},weaponTypes:{melee:"CONAN.weaponTypes.melee",ranged:"CONAN.weaponTypes.ranged"},weaponSizes:{none:"CONAN.weaponSizes.no",oneHanded:"CONAN.weaponSizes.1h",twoHanded:"CONAN.weaponSizes.2h",unbalanced:"CONAN.weaponSizes.ub",unwieldy:"CONAN.weaponSizes.uw",fixed:"CONAN.weaponSizes.fi",monstrous:"CONAN.weaponSizes.mo"},weaponReaches:{1:"1",2:"2",3:"3",4:"4"},weaponRanges:{close:"CONAN.weaponRanges.c",medium:"CONAN.weaponRanges.m",long:"CONAN.weaponRanges.l"},displayDamageDice:{x:"X"},damageDice:{0:"0",1:"1",2:"2",3:"3",4:"4",5:"5",6:"6",7:"7",8:"8",9:"9",10:"10",11:"11",12:"12",13:"13",14:"14",15:"15",16:"16",17:"17",18:"18",19:"19",20:"20"},soakDice:{light:"2dp",heavy:"4dp"},soakValue:{light:"CONAN.SoakLight",heavy:"CONAN.SoakHeavy"},weaponDescriptions:{axe:"CONAN.weaponDescriptionAxe",bow:"CONAN.weaponDescriptionBow",club:"CONAN.weaponDescriptionClu",crossbow:"CONAN.weaponDescriptionsCro",dagger:"CONAN.weaponDescritionDag",dirk:"CONAN.weaponDescriptionDir",flail:"CONAN.weaponDescriptionFla",flexile:"CONAN.weaponDescriptionFle",hammer:"CONAN.weaponDescriptionHam",improvised:"CONAN.weaponDescriptionImp",pick:"CONAN.weaponDescriptionPic",polearm:"CONAN.weaponDescriptionPol",shield:"CONAN.weaponGroup.shi",sling:"CONAN.weaponDescriptionSli",sword:"CONAN.weaponDescriptionSwo",spear:"CONAN.weaponDescriptionSpe"},qualitiesDescriptions:{heavy:"CONAN.qualities.description.heav",noisy:"CONAN.qualities.description.nois",veryheavy:"CONAN.qualities.description.vhea",armorFragile:"CONAN.qualities.description.afra",area:"CONAN.qualities.description.area",backlashx:"CONAN.qualities.description.back",blinding:"CONAN.qualities.description.blin",cavalryx:"CONAN.qualities.description.cava",fearsomex:"CONAN.qualities.description.fear",fragile:"CONAN.qualities.description.frag",grappling:"CONAN.qualities.description.grap",hiddenx:"CONAN.qualities.description.hidd",improvised:"CONAN.qualities.description.impr",incendiaryx:"CONAN.qualities.description.ince",intense:"CONAN.qualities.description.inte",knockdown:"CONAN.qualities.description.knoc",nonlethal:"CONAN.qualities.description.nonl",paired:"CONAN.qualities.description.pair",parrying:"CONAN.qualities.description.parr",persistentx:"CONAN.qualities.description.pers",piercingx:"CONAN.qualities.description.pier",shieldx:"CONAN.qualities.description.shie",spreadx:"CONAN.qualities.description.spre",stun:"CONAN.qualities.description.stun",subtlex:"CONAN.qualities.description.subt",thrown:"CONAN.qualities.description.thro",unforgivingx:"CONAN.qualities.description.unfo",viciousx:"CONAN.qualities.description.vici",volley:"CONAN.qualities.description.voll",blessedx:"CONAN.qualities.description.bles",brilliant:"CONAN.qualities.description.bril",cursedx:"CONAN.qualities.description.curs",enchantedx:"CONAN.qualities.description.ench",ensorcelledx:"CONAN.qualities.description.enso",intriguingx:"CONAN.qualities.description.intr",maledictionx:"CONAN.qualities.description.male",purposex:"CONAN.qualities.description.purp",regalx:"CONAN.qualities.description.rega",sanguinex:"CONAN.qualities.description.sang",trappedx:"CONAN.qualities.description.trap",patron:"CONAN.qualities.description.patr",familiar:"CONAN.qualities.description.fami",pairedx:"CONAN.qualities.description.pair",brittle:"CONAN.qualities.description.brit",bulky:"CONAN.qualities.description.bulk",cool:"CONAN.qualities.description.cool",courage:"CONAN.qualities.description.cour",mentalPiercingx:"CONAN.qualities.description.apie",warm:"CONAN.qualities.description.warm",weak:"CONAN.qualities.description.weak",keen:"CONAN.qualities.description.keen",intimidating:"CONAN.qualities.description.inti"}};class t extends Application{static get defaultOptions(){const e=super.defaultOptions;return e.id="counter",e.classes=["conan2d20"],e.template="systems/conan2d20/templates/apps/counter.html",e.width="auto",e.height=300,e.popOut=!1,e}getData(){const e=super.getData();return e.momentum=game.settings.get("conan2d20","momentum"),e.doom=game.settings.get("conan2d20","doom"),e.canEdit=game.user.isGM||game.settings.get("conan2d20","playerCounterEdit"),e}activateListeners(e){super.activateListeners(e),e.find("input").change((e=>{const a=$(e.currentTarget).parents(".counter").attr("data-type");t.setCounter(e.target.value,a)})),e.find(".incr,.decr").click((e=>{const a=$(e.currentTarget).parents(".counter").attr("data-type"),s=$(e.currentTarget).hasClass("incr")?1:-1;t.changeCounter(1*s,a)}))}static async setCounter(e,a){t.checkCounterUpdate(e,a),e=Math.round(e),game.user.isGM?(e>6&&"momentum"===a?(await game.settings.set("conan2d20",a,6),CONFIG.CONAN.Counter.render(!0)):e<0?(await game.settings.set("conan2d20",a,0),CONFIG.CONAN.Counter.render(!0)):(await game.settings.set("conan2d20",a,e),CONFIG.CONAN.Counter.render(!0)),game.socket.emit("system.conan2d20",{type:"updateCounter"})):game.socket.emit("system.conan2d20",{type:"setCounter",payload:{value:e,type:a}})}static async changeCounter(e,a){t.checkCounterUpdate(e,a);let s=game.settings.get("conan2d20",a);s+e>6&&"momentum"===a?t.setCounter(6,a):s+e<0?t.setCounter(0,a):(s+=e,t.setCounter(s,a))}static checkCounterUpdate(e,t){if("doom"!==t&&"momentum"!==t)throw ui.notifications.error("Error updating Counter: Invalid Counter Type"),CONFIG.CONAN.Counter.render(!0),"Conan 2D20 | Error updating Counter: Invalid Counter Type";if(Number.isNaN(e))throw ui.notifications.error("Error updating Counter: Invalid Value Type"),CONFIG.CONAN.Counter.render(!0),"Conan 2D20 | Error updating Counter: Invalid Value Type"}}class s extends Actor{async _preCreate(e,t,a){await super._preCreate(e,t,a);const s={bar1:{attribute:"health.physical"},bar2:{attribute:"health.mental"},displayName:game.settings.get("conan2d20","defaultTokenSettingsName"),displayBars:game.settings.get("conan2d20","defaultTokenSettingsBar"),disposition:CONST.TOKEN_DISPOSITIONS.FRIENDLY,name:e.name};"character"===e.type&&(s.vision=!0,s.actorLink=!0),"npc"===e.type&&(s.actorLink=!1,s.disposition=CONST.TOKEN_DISPOSITIONS.HOSTILE),this.updateSource({prototypeToken:s})}async getAvailableDoom(){return game.settings.get("conan2d20","doom")}async getAvailableFortune(){if("npc"===this.type){const e=game.settings.get("conan2d20","doom");return Math.floor(e/3)}return this.system.resources.fortune.value}async getAvailableMomentum(){return this.system.momentum+game.settings.get("conan2d20","momentum")}getDifficultyIncrease(e){const t=["int","per","wil"].includes(e);return"npc"===this.type?t?this.system.health.mental.traumas.value:this.system.health.physical.wounds.value:t?Object.values(this.system.health.mental.traumas.dots).reduce(((e,t)=>e+("wounded"===t.status?1:0)),0):Object.values(this.system.health.physical.wounds.dots).reduce(((e,t)=>e+("wounded"===t.status?1:0)),0)}getItemByName(e){return this.items.find((t=>t.name===e))||null}getKits(){return this.collections.items.filter((e=>"kit"===e.type))}getMaxResolve(){return this.system.attributes.wil.value+this.system.skills.dis.expertise.value-this.system.health.mental.despair+this.system.health.mental.bonus}getMaxVigor(){return this.system.attributes.bra.value+this.system.skills.res.expertise.value-this.system.health.physical.fatigue+this.system.health.physical.bonus}getMergedReloads(){const e=this.getReloads(),t={};for(let a of e)t[a.name]?(t[a.name].uses+=parseInt(a.uses),t[a.name].max+=parseInt(a.max),t[a.name].ids.push(a.id)):t[a.name]={name:a.name,uses:parseInt(a.uses),max:parseInt(a.max),ids:[a.id]};let a=[];for(const[e,s]of Object.entries(t))a.push(t[e]);return a}getReloads(){return this.items.filter((e=>"reload"===e.system.kitType)).map((e=>({id:e.id,name:e.name,uses:e.system.uses.value,max:e.system.uses.max}||[]))).sort(((e,t)=>e.name<t.name?-1:e.name>t.name?1:0))}getSkillTargetNumberAndFocus(e,t,a){const s=this.system.skills;let i=parseInt(this.system.attributes[e].value)||0,n=0,o=0;return"npc"===this.type?(n=o=parseInt(s[a].value)||0,i+=o):(o=parseInt(s[t].expertise.value)||0,n=parseInt(s[t].focus.value)||0,i+=o),[i,o,n]}prepareData(){super.prepareData();const e=this.system;if("character"===this.type?this._prepareCharacterData(e):"npc"===this.type&&this._prepareNPCData(e),void 0!==e.qualities){const t={};for(const[a]of Object.entries(t))e.qualities[a]}return e}_prepareCharacterData(e){(isNaN(e.health.physical.bonus)||null===e.health.physical.bonus)&&(e.health.physical.bonus=0),e.health.physical.max=e.attributes.bra.value+e.skills.res.expertise.value-e.health.physical.fatigue+e.health.physical.bonus,null===e.health.physical.value?e.health.physical.value=e.attributes.bra.value+e.skills.res.expertise.value:e.health.physical.value>e.health.physical.max?e.health.physical.value=e.health.physical.max:e.health.physical.value<0&&(e.health.physical.value=0),(isNaN(e.health.mental.bonus)||null===e.health.mental.bonus)&&(e.health.mental.bonus=0),e.health.mental.max=e.attributes.wil.value+e.skills.dis.expertise.value-e.health.mental.despair+e.health.mental.bonus,null===e.health.mental.value?e.health.mental.value=e.attributes.wil.value+e.skills.dis.expertise.value:e.health.mental.value>e.health.mental.max?e.health.mental.value=e.health.mental.max:e.health.mental.value<0&&(e.health.mental.value=0);for(const[t,a]of Object.entries(e.skills))a.tn.value=a.expertise.value+e.attributes[a.attribute].value,e.skills[t].expertise.value>0&&(e.skills[t].trained=!0);e.resources.upkeep.value=3+e.background.standing.value-e.background.renown,e.resources.upkeep.value<0&&(e.resources.upkeep.value=0),e.actions=[]}_prepareNPCData(e){let t=1;"toughened"===e.type?t=2:"nemesis"===e.type&&(t=5),e.health.mental.traumas.max=t,e.health.physical.wounds.max=t}static addDoom(e){t.changeCounter(+`${e}`,"doom")}static addMomentum(e){t.changeCounter(+`${e}`,"momentum")}static payDoom(e,a){if(!a>0)return;const s=game.actors.get(e._id);t.changeCounter(+`${a}`,"doom");let i=`<h2>${game.i18n.localize("CONAN.rollDoomPaid")}</h2><div>`;i+=`<p>${game.i18n.format("CONAN.rollDoomPaidChatText",{character:`<b>${s.name}</b>`,spent:`<b>${a}</b>`})}</p></div>`;const n={user:game.user.id,content:i};ChatMessage.create(n)}static spendFortune(e,t){if(!t>0)return;const a=e.system.resources.fortune.value-t;if(a<0)throw"Fortune spend would exceed available fortune points.";{const t={"system.resources.fortune.value":a};game.actors.get(e._id).update(t)}}static buyFortune(e,a){if(!a>0)return;if("npc"===!e.type)return;const s=3*a;if(game.settings.get("conan2d20","doom")-s<0)throw"Doom cost of Fortune would exceed available Doom points.";t.changeCounter(-`${s}`,"doom");let i=`<h2>${game.i18n.localize("CONAN.rollFortuneBought")}</h2><div>`;i+=`<p>${game.i18n.format("CONAN.rollFortuneBoughtChatText",{character:`<b>${e.name}</b>`,spent:`<b>${s}</b>`,fortune:`<b>${a}</b>`})}</p></div>`;const n={user:game.user.id,content:i};ChatMessage.create(n)}static spendDoom(e,a){if(!a>0)return;if(game.settings.get("conan2d20","doom")-a<0)throw"Doom spend would exceed available doom points.";t.changeCounter(-`${a}`,"doom");let s=`<h2>${game.i18n.localize("CONAN.rollDoomSpent")}</h2><div>`;s+=`<p>${game.i18n.format("CONAN.rollDoomSpentChatText",{character:`<b>${e.name}</b>`,spent:`<b>${a}</b>`})}</p></div>`;const i={user:game.user.id,content:s};ChatMessage.create(i)}static spendMomentum(e,a){if(!a>0)return;const s=game.actors.get(e._id);let i=s.system.momentum,n=game.settings.get("conan2d20","momentum");if(a>n+i)throw"Momentum spend would exceed available momentum points.";{let e=n;i-=a,i<0&&(e+=i,i=0),s.update({"system.momentum":i}),t.setCounter(`${e}`,"momentum");let o=`<h2>${game.i18n.localize("CONAN.rollMomentumSpent")}</h2><div>`;o+=`<p>${game.i18n.format("CONAN.rollMomentumSpentChatText",{character:`<b>${s.name}</b>`,spent:`<b>${a}</b>`})}</p></div>`;const l={user:game.user.id,content:o};ChatMessage.create(l)}}async spendReloads(e,t){for(console.log(e);t>0&&e.ids.length>0;){const a=e.ids.pop(),s=this.getEmbeddedDocument("Item",a).system.uses.value;let i=0;s>0&&(t>=s?(i=s,t-=s):i=t,this.updateEmbeddedDocuments("Item",[{_id:a,"system.uses.value":s-i}]))}}_getModifiers(e,t){let a;if("skill"===e){const e=CONFIG.rollDifficultyLevels,s=CONFIG.skillRollResourceSpends,i=this._getPrefilledDifficulty(t.skill),n=this._getPrefilledAttribute(t.skill);return"npc"===this.type?(a={difficulty:e,prefilledDifficulty:i.difficulty,prefilledAttribute:n.attribute,diceModifier:s,successModifier:0,npcAttributes:CONFIG.attributes,actorType:this.type},a):(a={difficulty:e,prefilledDifficulty:i.difficulty,difficultyTooltip:i.tooltipText,diceModifier:s,successModifier:0,actorType:this.type},a)}if("damage"===e){const e=CONFIG.weaponTypes;let s="",i="character",n=this._attackBonuses();"display"===t.type?s="display":"weapon"===t.type?s=t.system.weaponType:"npcattack"===t.type&&(i="npc",s=t.system.attackType),a={attacker:i,attackTypes:e,baseDamage:t.system.damage.dice,weaponType:s,momentumModifier:0,reloadModifier:0,talentModifier:0,attackBonuses:n}}return a}_getPrefilledAttribute(e){return{attribute:CONFIG.expertiseAttributeMap[e]}}_getPrefilledDifficulty(e){const t=[];let a=1;if(this.hasCondition("dazed")&&(a+=1,t.push({name:CONFIG.conditionTypes.dazed,value:1})),this.hasCondition("blind")&&["obs","ins","ran","mel","sai","par","cmb","mov","sns"].includes(e)&&(a+=2,t.push({name:CONFIG.conditionTypes.blind,value:2})),this.hasCondition("deaf")&&["obs","ins","com","per","sns"].includes(e)&&(a+=2,t.push({name:CONFIG.conditionTypes.deaf,value:2})),"character"===this.actorType){const s=["agi","bra","coo"],i=["awa","int","per","wil"],n=Object.values(this.system.health.physical.wounds.dots).reduce(((e,t)=>e+("wounded"===t.status?1:0)),0);n>0&&s.includes(CONFIG.skillAttributeMap[e])&&(a+=n,t.push({name:"Wounds",value:n}));const o=Object.values(this.system.health.mental.traumas.dots).reduce(((e,t)=>e+("wounded"===t.status?1:0)),0);o>0&&i.includes(CONFIG.skillAttributeMap[e])&&(a+=o,t.push({name:"Trauma",value:o}))}else if("npc"===this.actorType){const s=["agi","bra"],i=["per","int","awa"],n=this.system.health.physical.wounds.value,o=this.system.health.mental.traumas.value;n>0&&s.includes(CONFIG.expertiseAttributeMap[e])&&(a+=n,t.push({name:"Wounds",value:n})),o>0&&i.includes(CONFIG.expertiseAttributeMap[e])&&(a+=o,t.push({name:"Traumas",value:o}))}a+=this.system.difficultyModifier||0,a>5&&(a=5);let s="";return t.length&&(s=t.map((e=>`${e.name}: +${e.value}`)).join("\n")),{difficulty:a,tooltipText:s}}_attackBonuses(){const e=this.isNpc();return{threaten:e?0:this._attributeBonus("per"),melee:e?0:this._attributeBonus("bra"),ranged:e?0:this._attributeBonus("awa")}}_attributeBonus(e){const t=this.system.attributes[e].value;return t<=8?0:t<=9?1:t<=11?2:t<=13?3:t<=15?4:t>=16?5:void 0}async getRollOptions(e){const t=this.getFlag(game.system.id,"rollOptions")??{};return e.flatMap((e=>Object.entries(t[e]??{}).reduce(((e,[t,a])=>e.concat(a?t:[])),[]))).reduce(((e,t)=>e.includes(t)?e:e.concat(t)),[])}async addCondition(e,t=1){if("string"==typeof e&&(e=duplicate(game.conan2d20.config.statusEffects.find((t=>t.id===e)))),!e)return"No Effect Found";if(!e.id)return"Conditions require an id field";e.label=game.i18n.localize(e.label);let a=this.hasCondition(e.id);return a&&null===a.flags.conan2d20.value?a:a?(a=duplicate(a),a.flags.conan2d20.value+=t,this.updateEmbeddedDocuments("ActiveEffect",[a])):(a||(Number.isNumeric(e.flags.conan2d20.value)&&(e.flags.conan2d20.value=t),e["flags.core.statusId"]=e.id),this.createEmbeddedDocuments("ActiveEffect",[e]))}isNpc(){return"npc"===this.type}async removeCondition(e,t=1){if(!(e=duplicate(game.conan2d20.config.statusEffects.find((t=>t.id===e)))))return"No Effect Found";if(!e.id)return"Conditions require an id field";let a=this.hasCondition(e.id);if(a){const e=duplicate(a);return e.flags.conan2d20.value-=t,e.flags.conan2d20.value<=0?this.deleteEmbeddedDocuments("ActiveEffect",[a.id]):this.updateEmbeddedDocuments("ActiveEffect",[e])}}hasCondition(e){return this.effects.find((t=>t.flags.core.statusId===e))}get actorType(){return this.type}}class i extends FormApplication{constructor(e,t){super(e,t),this.actor=e,this.toBank=this.actor.system.momentum,this.toSpend=0}static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{id:"momentum-banker",classes:["conan2d20","momentum-banker"],template:"systems/conan2d20/templates/apps/momentum-banker.html",width:400,height:"auto",submitOnChange:!1})}get title(){return`${game.i18n.localize("CONAN.rollMomentumSpendTitle")}`}activateListeners(e){super.activateListeners(e),e.find("#momentumSpend").on("input",(t=>{this.toSpend=parseInt(t.target.value),this.toBank=this.actor.system.momentum-this.toSpend;const a=`Spend: ${this.toSpend}, Bank: ${this.toBank}`;e.find("#spendBankButton").html(a)})),e.find("#spendBankButton").click((()=>{let e="character"===this.actor.type?"momentum":"doom";"momentum"===e?s.addMomentum(this.toBank):s.addDoom(this.toBank),this.momentumChatMessage(e),this.actor.update({"system.momentum":0}),this.close()}))}getData(){return{personalMomentum:this.actor.system.momentum}}momentumChatMessage(e){let t=`<h2>${game.i18n.localize("CONAN.rollMomentumBanked")}</h2><div>`;t+=`<p>${game.i18n.format("CONAN.rollMomentumBankedChatText",{character:`<b>${this.actor.name}</b>`,spent:`<b>${this.toSpend}</b>`,banked:`<b>${this.toBank}</b>`,poolType:`<b>${e}</b>`})}</p></div>`;const a={user:game.user.id,content:t};ChatMessage.create(a)}}class n extends Application{constructor(e,t){super(e,t),this.actor=null,this.rollData={actorId:null,assists:{complication:20,focus:0,numDice:0,tn:7},bonus:{dice:0,momentum:0,successes:0},difficulty:{base:1,display:"&nbsp;",increase:0},skill:{complication:20,expertise:0,focus:0,tn:7},spends:{doom:0,fortune:0,momentum:0},fixedResults:[],isAssist:!1,isReroll:!1,item:null,numDice:CONFIG.BASE_2D20_DICE,title:"Skill Test"},e&&(this.actor=e,this.rollData.actorId=this.actor.id,this.attribute=t.attribute,this.expertise=t.expertise,this.skill=t.skill,this.rollData.item=t.item??null),this.isActorRoll=!!this.actor,this.isNpc=!1,this.isActorRoll&&(this.isNpc="npc"===this.actor.type),this.difficulties=[{active:!1,tooltip:game.i18n.localize("CONAN.skillRollDifficultyLevels.0")},{active:!0,tooltip:game.i18n.localize("CONAN.skillRollDifficultyLevels.1")},{active:!1,tooltip:game.i18n.localize("CONAN.skillRollDifficultyLevels.2")},{active:!1,tooltip:game.i18n.localize("CONAN.skillRollDifficultyLevels.3")},{active:!1,tooltip:game.i18n.localize("CONAN.skillRollDifficultyLevels.4")},{active:!1,tooltip:game.i18n.localize("CONAN.skillRollDifficultyLevels.5")}],this.maxDice=CONFIG.MAX_2D20_DICE;let a=this.baseDice=CONFIG.BASE_2D20_DICE;this.isNpc&&"minion"===this.actor.system.type&&(a=this.rollData.numDice=this.baseDice=1,this.maxDice=CONFIG.MAX_2D20_DICE-1),this.dice=[];for(let e=0;e<CONFIG.MAX_2D20_DICE;e++)this.dice.push({active:e<a});this.rollData.isAssist=a===CONFIG.ASSIST_2D20_DICE&&this.baseDice!==CONFIG.ASSIST_2D20_DICE}static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{classes:["conan2d20","skill-roller"],template:"systems/conan2d20/templates/apps/skill-roller.html",width:320,height:"auto",submitOnChange:!1})}get title(){const e=game.i18n.localize("CONAN.skillRollerTitle");return this.actor?`${e}: ${this.actor.name}`:e}activateListeners(e){super.activateListeners(e);const t=this;e.find(".skill-roller .difficulty").on("click",this._onClickDifficultyButton.bind(this)),e.find(".skill-roller .dice").on("click",this._onClickDiceIcon.bind(this)),e.find(".skill-roller .quantity-grid").each((function(){const e=$(this),a=e.find('input[type="number"]'),s=e.find(".quantity-up"),i=e.find(".quantity-down"),n=a.attr("data-quantity-type"),[o,l]=n.split(".");a.on("wheel",(e=>{e.preventDefault(),e.originalEvent.deltaY<0?t[`_inc_${o}_${l}`](a):e.originalEvent.deltaY>0&&t[`_dec_${o}_${l}`](a)})),s.click((e=>{e.preventDefault(),t[`_inc_${o}_${l}`](a)})),i.click((e=>{e.preventDefault(),t[`_dec_${o}_${l}`](a)}))})),e.find(".skill-roller select").on("change",(function(){const e=$(this),a=e.val(),s=e.attr("name");switch(s){case"attribute":t._updateAttribute(a);break;case"expertise":t._updateExpertise(a);break;case"skill":t._updateSkill(a);break;default:console.error(`Unknown selector ${s}`)}})),e.find(".roll-skill-check").click(this._rollSkillCheck.bind(this))}async getData(){this.attribute=void 0!==this.attribute?this.attribute:this._sortedAttributes()[0].key,this.expertise=void 0!==this.expertise?this.expertise:this._sortedExpertiseFields()[0].key,this.skill=void 0!==this.skill?this.skill:this._sortedSkills()[0].key;const e={actorData:duplicate(this.actor),attributes:this._sortedAttributes(),dice:this.dice,difficulties:this.difficulties,expertiseFields:this._sortedExpertiseFields(),isActorRoll:this.isActorRoll,isNpc:this.isNpc,rollData:this.rollData,selectedAttribute:this.attribute,selectedExpertise:this.expertise,selectedSkill:this.skill,skills:this._sortedSkills(),difficultyIncreased:!1};return this.isActorRoll&&(e.difficultyIncreased=this.actor.getDifficultyIncrease(this.attribute)>0),await this._updateTestDetails(),e}async _adjustBoughtDice(e){if(this.isAssist)return this.rollData.bonus.dice=0,this.rollData.bonus.momentum=0,this.rollData.bonus.successes=0,this.rollData.spends.doom=0,this.rollData.spends.fortune=0,this.rollData.spends.momentum=0,this.rollData.numDice=e,await this._updateAllFormValues(),!0;const t=this.baseDice+this.rollData.bonus.dice+this.rollData.spends.fortune;if(e<t)return!1;let a=0;this.isNpc?(a=await this.actor.getAvailableDoom(),a-=3*this.rollData.spends.fortune):a=await this.actor.getAvailableMomentum();let s=0,i=0,n=(e=e>this.maxDice?this.maxDice:e)-t,o=0;for(;n>0;)!this.isNpc&&a>0?(a--,i++,o++):this.isNpc&&a>0?(a--,s++,o++):this.isNpc||(s++,o++),n--;return this.rollData.numDice=t+o,this.rollData.spends.doom=s,this.rollData.spends.momentum=i,this._updateAllFormValues(),!0}async _checkFortuneSpends(){const e=this.rollData.difficulty.base+this.rollData.difficulty.increase;let t=this.rollData.spends.fortune;return this.rollData.skill.focus>0&&(t*=2),t>=e}async _dec_bonus_dice(e){0!==parseInt(e.val())&&(this.rollData.bonus.dice--,this.rollData.numDice--,e.val(this.rollData.bonus.dice),await this._updateDiceIcons())}async _dec_bonus_momentum(e){0!==parseInt(e.val())&&(this.rollData.bonus.momentum--,this._updateAllFormValues())}async _dec_bonus_successes(e){0!==parseInt(e.val())&&(this.rollData.bonus.successes--,this._updateAllFormValues())}async _dec_skill_complication(e){0!==parseInt(e.val())&&(this.rollData.skill.complication--,this._updateAllFormValues(),this._updateTestDetails())}async _dec_skill_focus(e){0!==parseInt(e.val())&&(this.rollData.skill.focus--,this._updateAllFormValues(),this._updateTestDetails())}async _dec_skill_tn(e){0!==parseInt(e.val())&&(this.rollData.skill.tn--,this._updateAllFormValues(),this._updateTestDetails())}async _dec_spends_doom(e){0!==parseInt(e.val())&&(this.rollData.spends.doom--,this.rollData.numDice--,e.val(this.rollData.spends.doom),await this._updateDiceIcons())}async _dec_spends_fortune(e){0!==parseInt(e.val())&&(this.rollData.spends.fortune--,this.rollData.numDice--,e.val(this.rollData.spends.fortune),await this._updateDiceIcons())}async _dec_spends_momentum(e){0!==parseInt(e.val())&&(this.rollData.spends.momentum--,this.rollData.numDice--,e.val(this.rollData.spends.momentum),await this._updateDiceIcons())}_getTestDifficulty(){if(this.actor){[this.rollData.skill.tn,this.rollData.skill.expertise,this.rollData.skill.focus]=this.actor.getSkillTargetNumberAndFocus(this.attribute,this.skill,this.expertise),this.rollData.difficulty.increase=this.actor.getDifficultyIncrease(this.attribute);const e=this.rollData.skill.expertise+this.rollData.skill.focus<=0;this.rollData.skill.complication=e?19:20}else this.rollData.skill.complication=this.element.find("#skill-complication").val()||20,this.rollData.skill.expertise=0,this.rollData.skill.focus=this.element.find("#skill-focus").val()||0,this.rollData.skill.tn=this.element.find("#skill-tn").val()||7;let e=this.rollData.difficulty.base+this.rollData.difficulty.increase;e=e>5?5:e;const t=game.i18n.localize(`CONAN.skillRollDifficultyLevels.${e}`);let a=`TN ${this.rollData.skill.tn}, `;return a+=`Focus ${this.rollData.skill.focus}, `,a+=`Comp ${this.rollData.skill.complication}`,a=this.isAssist?`${game.i18n.localize("CONAN.Assist")}, ${a}`:`${t}, ${a}`,this.rollData.difficulty.display=a,a}async _inc_bonus_dice(e){this.rollData.numDice<this.maxDice&&(this.rollData.bonus.dice++,this.rollData.numDice++,e.val(this.rollData.bonus.dice),await this._updateDiceIcons())}async _inc_bonus_momentum(){this.rollData.bonus.momentum++,this._updateAllFormValues()}async _inc_bonus_successes(){this.rollData.bonus.successes++,this._updateAllFormValues()}async _inc_skill_complication(){this.rollData.skill.complication<20&&(this.rollData.skill.complication++,this._updateAllFormValues(),this._updateTestDetails())}async _inc_skill_focus(){this.rollData.skill.focus<5&&(this.rollData.skill.focus++,this._updateAllFormValues(),this._updateTestDetails())}async _inc_skill_tn(){this.rollData.skill.tn<20&&(this.rollData.skill.tn++,this._updateAllFormValues(),this._updateTestDetails())}async _inc_spends_doom(e){let t=parseInt(e.val()),a=await this.actor.getAvailableDoom(),s=!0;this.isNpc&&(a-=3*this.rollData.spends.fortune,s=t<a),s&&this.rollData.numDice<this.maxDice&&(this.rollData.spends.doom++,this.rollData.numDice++,e.val(this.rollData.spends.doom),await this._updateDiceIcons())}async _inc_spends_fortune(e){let t=parseInt(e.val());await this.actor.getAvailableFortune()-t>0&&this.rollData.numDice<this.maxDice&&(this.rollData.spends.fortune++,this.rollData.numDice++,e.val(this.rollData.spends.fortune),await this._updateDiceIcons())}async _inc_spends_momentum(e){let t=parseInt(e.val());await this.actor.getAvailableMomentum()-t>0&&this.rollData.numDice<this.maxDice&&(this.rollData.spends.momentum++,this.rollData.numDice++,e.val(this.rollData.spends.momentum),await this._updateDiceIcons())}async _onClickDiceIcon(e){e.preventDefault();const t=$(e.currentTarget),a=parseInt(t.attr("data-dice-number"))+1,s=this.rollData.numDice;if(a===s)return;1===a?(this.isAssist=!0,this.isActorRoll&&this.isNpc&&(this.isAssist="minion"!==this.actor.system.type)):this.isAssist=!1;let i=!0;this.isActorRoll?i=await this._adjustBoughtDice(a,s):this.rollData.numDice=a,i&&(this.isAssist?(this.element.find(".extra-dice-hideable").addClass("disable-entry"),this.element.find(".difficulty-settings").addClass("disable-entry")):(this.element.find(".extra-dice-hideable").removeClass("disable-entry"),this.element.find(".difficulty-settings").removeClass("disable-entry")),await this._updateTestDetails(),await this._updateDiceIcons())}async _onClickDifficultyButton(e){e.preventDefault();const t=$(e.currentTarget),a=parseInt(t.attr("data-difficulty"));a!==this.rollData.difficulty.base&&(this.rollData.difficulty.base=a,t.siblings().removeClass("active"),t.addClass("active"),this._updateTestDetails())}async _performRoll(){const e=await l.calculateSkillRoll(this.rollData);o.renderSkillTestCard({actor:this.actor,item:this.rollData.item,results:e,rollData:this.rollData,type:"skill"})}async _rollSkillCheck(){if(this.close(),this.actor){const e=this.rollData.skill.expertise+this.rollData.skill.focus<=0;if(this.rollData.skill.complication=e?19:20,this.isNpc&&this.actor.system.isMob){const e=this.rollData.assists.expertise+this.rollData.assists.focus<=0;this.rollData.assists.complication=e?19:20,this.rollData.assists.numDice=this.actor.system.mobCount-1,this.rollData.assists.tn=this.rollData.skill.tn,this.rollData.assists.focus=this.rollData.skill.focus,this.rollData.assists.expertise=this.rollData.skill.expertise}}if(this.isActorRoll&&(this.isNpc?(s.buyFortune(this.actor,this.rollData.spends.fortune),s.spendDoom(this.actor,this.rollData.spends.doom)):(s.payDoom(this.actor,this.rollData.spends.doom),s.spendFortune(this.actor,this.rollData.spends.fortune),s.spendMomentum(this.actor,this.rollData.spends.momentum))),await this._checkFortuneSpends()){const e="systems/conan2d20/templates/apps/fortune-roll-dialogue.html",t=await renderTemplate(e,{});new Dialog({content:t,title:game.i18n.localize("CONAN.RollRemainingDice"),buttons:{yes:{label:game.i18n.localize("CONAN.rollYesLabel"),callback:()=>{this._performRoll()}},no:{label:game.i18n.localize("CONAN.rollNoLabel"),callback:()=>{this.rollData.numDice=0,this._performRoll()}}},default:"yes"}).render(!0)}else this._performRoll()}_sortedAttributes(){return this._sortObjectsByName(CONFIG.CONAN.attributes)}_sortedExpertiseFields(){return this._sortObjectsByName(CONFIG.CONAN.expertiseFields)}_sortedSkills(){return this._sortObjectsByName(CONFIG.CONAN.skills)}_sortObjectsByName(e){const t=[];for(let a in e)t.push({key:a,name:e[a]});return t.sort(((e,t)=>e.name<t.name?-1:e.name>t.name?1:0)),t}async _updateAllFormValues(){const e=this;this.element.find(".quantity-grid").each((function(){const t=$(this).find('input[type="number"]');let a=t.attr("data-quantity-type");a=a.split(".");const s=e.rollData[a[0]]||{};t.val(s[a[1]])}))}async _updateAttribute(e){this.attribute=e,this.rollData.difficulty.increase=this.actor.getDifficultyIncrease(e),this._updateTestDetails()}async _updateDiceIcons(){const e=this.rollData.numDice,t=this;this.element.find(".dice").each((function(){const a=$(this),s=parseInt(a.attr("data-dice-number"));a.removeClass("fortune selected unselected"),s<t.rollData.spends.fortune?(a.addClass("fortune"),a.html("1")):s<e?(a.addClass("selected"),a.html("?")):(a.addClass("unselected"),a.html("&nbsp;"))}))}async _updateExpertise(e){this.expertise=e,this._updateTestDetails()}async _updateSkill(e){this.skill=e,this._updateTestDetails()}async _updateSkillDescription(){if(this.isActorRoll){const e=CONFIG.attributes[this.attribute];let t=CONFIG.skills[this.skill];this.isNpc&&(t=CONFIG.expertiseFields[this.expertise]),this.rollData.title=`${e} / ${t}`}}async _updateTestDetails(){const e=this._getTestDifficulty();await this._updateSkillDescription(),this.element.find(".test-details").html(e);let t=game.i18n.localize("CONAN.skillRollDifficultyIncreased");this.rollData.difficulty.increase>0?this.element.find(".difficulty-increased").html(t):this.element.find(".difficulty-increased").html("&nbsp;")}}class o{static async renderCombatDiceRollCard(e){o._renderRollCard(e,"systems/conan2d20/templates/chat/combat-dice-roll-card.html")}static async renderDamageRollCard(e){o._renderRollCard(e,"systems/conan2d20/templates/chat/damage-roll-card.html")}static async renderSkillTestCard(e){o._renderRollCard(e,"systems/conan2d20/templates/chat/skill-roll-card.html")}static async renderSoakDiceRollCard(e){o._renderRollCard(e,"systems/conan2d20/templates/chat/soak-roll-card.html")}static async rerollNotification(e,t){let a;a=t?ChatMessage.getSpeaker({actor:t,token:t.token}):ChatMessage.getSpeaker();let s=`<h2>${game.i18n.localize("CONAN.rerollTriggered")}</h2><div>`;const i=e>1?game.i18n.localize("CONAN.dicePlural"):game.i18n.localize("CONAN.diceSingular");s+="npc"===t?.type?`${game.i18n.format("CONAN.rerollTextNpc",{character:`<b>${a.alias}</b>`,diceCount:`<b>${e}</b>`})} ${i}.<br>`:`${game.i18n.format("CONAN.rerollText",{character:`<b>${a.alias}</b>`,diceCount:`<b>${e}</b>`})} ${i}.<br>`,s+="</div>";const n={speaker:a,rollMode:"reroll",content:s};ChatMessage.create(n)}static getMessageActor(e){const t=e.flags.conan2d20.tokenId;let a;return a=t?game.actors.tokens[t]:game.actors.get(e.speaker.actor),a}static async _renderRollCard(e,t){const a=await renderTemplate(t,e);let s;s=e.actor?ChatMessage.getSpeaker({actor:e.actor,token:e.actor.token}):ChatMessage.getSpeaker();const i={"flags.data":e,content:a,speaker:s,title:e.rollData.title,user:game.user.id};return ChatMessage.applyRollMode(i,game.settings.get("core","rollMode")),ChatMessage.create(i)}}Hooks.on("renderChatLog",((e,t,a)=>{t.on("click",".chat-bank-momentum",(e=>{const t=$(e.currentTarget).parents(".message").attr("data-message-id"),a=game.messages.get(t);if(a.isAuthor||game.user.isGM){const e=game.actors.get(a.speaker.actor);e.system.momentum<=0?ui.notifications.warn(game.i18n.localize("CONAN.noUnbankedMomentum")):new i(e).render(!0)}})),t.on("click",".chat-execute-attack",(e=>{e.preventDefault();const t=$(e.currentTarget).parents(".message").attr("data-message-id"),a=game.messages.get(t),s=o.getMessageActor(a),i=s.getEmbeddedDocument("Item",a.flags.conan2d20.itemId),l=i.skillToUse(s.type),r="npc"===s.type,c=r?CONFIG.expertiseAttributeMap[l]:CONFIG.skillAttributeMap[l];new n(s,{attribute:c,skill:r?null:l,expertise:r?l:null,item:i}).render(!0)})),t.on("click",".chat-execute-damage",(e=>{e.preventDefault();const t=$(e.currentTarget).parents(".message").attr("data-message-id"),a=game.messages.get(t);o.getMessageActor(a).getEmbeddedDocument("Item",a.flags.conan2d20.itemId).triggerDamageRoll()})),t.on("click",".chat-execute-soak",(e=>{e.preventDefault();const t=$(e.currentTarget).parents(".message").attr("data-message-id"),a=game.messages.get(t);o.getMessageActor(a).getEmbeddedDocument("Item",a.flags.conan2d20.itemId).triggerSoakRoll()})),t.on("click",".roll-list-entry",(e=>{const t=$(e.currentTarget),a=t.parents(".message").attr("data-message-id"),s=game.messages.get(a),i=s.flags.data.rollData.isReroll,n=s.flags.data.results.rolls;if(s.isAuthor||game.user.isGM){if(i)return ui.notifications.warn(game.i18n.localize("CONAN.YouCanOnlyRerollOnce"));if(n[parseInt(t.attr("id"))].fortuneSpend)return ui.notifications.warn(game.i18n.localize("CONAN.YouCannotSelectFortuneDiceForReroll"));{t.toggleClass("selected");const e=t.parents().children(".message-content").html();s.update({content:e})}}}))})),Hooks.on("getChatLogEntryContext",((e,t)=>{t.push({name:game.i18n.localize("CONAN.CHATOPT.triggerReroll"),icon:'<i class="fas fa-dice"></i>',condition:function(e){let t=!1;const a=game.messages.get(e.attr("data-message-id"));return(a.isAuthor||game.user.isGM)&&e.find(".roll-card").length&&!1===a.flags.data.rollData.isReroll&&(t=!0),t},callback:e=>{const t=game.messages.get(e.attr("data-message-id"));try{l.triggerReroll(t)}catch(e){console.log(e),ui.notifications.error(e)}}})}));class l{static async calculateCombatDiceRoll(e){const t={total:0,effects:0,location:null,rolls:[]},a=e.numDice-e.fixedResults.length,s=new Roll(`${a}dp`);let i=await s.roll({async:!0});if(game.dice3d&&await l.showDiceSoNice(s,game.settings.get("core","rollMode")),t.rolls=i.terms[0].results,t.rolls.forEach(((e,t)=>{e.index=null,e.display=i.terms[0].resultValues[t]})),e.isReroll&&(t.rolls=await this._mergeRerolls(t.rolls,e.fixedResults)),t.rolls.forEach(((e,a)=>{e.index=a,t.effects+=e.effect?1:0,t.total+=e.result<=2?e.result:0})),t.total+=e.spends.doom+e.spends.momentum,e.improvised||(t.total+=t.effects),!e.damage.location&&"mental"!==e.damage.type){let t=await new Roll("1d20").roll({async:!0});const a=parseInt(t.result);e.damage.location=a>=1&&a<=2?CONFIG.coverageTypes.head:a>=3&&a<=5?CONFIG.coverageTypes.rarm:a>=6&&a<=8?CONFIG.coverageTypes.larm:a>=9&&a<=14?CONFIG.coverageTypes.torso:a>=15&&a<=17?CONFIG.coverageTypes.rleg:CONFIG.coverageTypes.lleg}return t.location=e.damage.location,t}static async calculateSkillRoll(e){const t={successes:0,crits:0,momentum:0,complications:0,rolls:[]};let a;a=e.isReroll?e.numDice+e.assists.numDice-e.fixedResults.length:e.numDice-e.spends.fortune,a=a>=0?a:0;let s=new Roll(`${a}d20cs<=${e.skill.tn}cf>=${e.skill.complication}`),i=await s.roll({async:!0});if(game.dice3d&&await l.showDiceSoNice(s,game.settings.get("core","rollMode")),!e.isReroll)for(let a=0;a<e.spends.fortune;a++){let a=e.skill.focus>0;t.rolls.unshift({assist:!1,complication:!1,critical:a,result:1,success:!0,fortuneSpend:!0})}if(i.terms[0].results.forEach((a=>{t.rolls.push({assist:!1,complication:a.failure||!1,critical:a.result<=e.skill.focus,result:a.result,success:a.success||!1})})),e.assists.numDice>0&&!e.isReroll){let a=e.assists.numDice,s=new Roll(`${a}d20cs<=${e.assists.tn}cf>=${e.assists.complication}`),i=await s.roll({async:!0});game.dice3d&&await l.showDiceSoNice(s,game.settings.get("core","rollMode")),i.terms[0].results.forEach((a=>{t.rolls.push({assist:!0,complication:a.failure||!1,critical:a.result<=e.assists.focus,result:a.result,success:a.success||!1,fortuneSpend:!1})}))}e.isReroll&&(t.rolls=await this._mergeRerolls(t.rolls,e.fixedResults)),t.rolls.forEach(((e,a)=>{e.index=a,e.complication&&t.complications++,e.critical&&(t.crits++,t.successes++),e.success&&t.successes++}));const n=e.difficulty.base+e.difficulty.increase;if(t.result="failure",t.successes>=n&&(t.successes+=e.bonus.successes,t.momentum=t.successes-n,t.momentum+=e.bonus.momentum,t.result="success"),e.actorId){const a={};a["system.momentum"]=t.momentum,game.actors.get(e.actorId).update(a)}return t}static getDefaultCombatDiceRollOptions(){return{base:{numDice:1},bonus:{attribute:0,other:0,reloads:0,talent:0},damage:{location:null,type:null},spends:{doom:0,momentum:0},actorId:null,fixedResults:[],isReroll:!1,itemId:null,numDice:1,title:game.i18n.localize("CONAN.CombatDice")}}static async triggerReroll(e){const t=game.actors.get(e.speaker.actor),a=e.flags.data,s=a.type,i=[];$(e.content).children(".selected").each((function(){const e=this.id;i.push(a.results.rolls[e])}));let n=a.results.rolls;i.forEach((e=>{for(let t=0;t<n.length;t++)if(e.index===n[t].index){n.splice(t,1);break}}));const r=i.length;if(0===r)return ui.notifications.warn(game.i18n.localize("CONAN.NoDiceSelectedForReroll"));a.rollData.fixedResults=n,a.rollData.isReroll=!0,o.rerollNotification(r,t);const c=game.i18n.localize("CONAN.reroll");let u;a.rollData.title+=` (${c})`,u="skill"===s?await l.calculateSkillRoll(a.rollData):await l.calculateCombatDiceRoll(a.rollData);const d={actor:t,item:a.item,results:u,rollData:a.rollData,type:s};switch(s){case"combatDice":o.renderCombatDiceRollCard(d);break;case"damage":o.renderDamageRollCard(d);break;case"skill":o.renderSkillTestCard(d);break;case"soak":o.renderSoakDiceRollCard(d);break;default:console.error(`Unknown roll type: ${s}`)}}static async showDiceSoNice(e,t){if(game.modules.get("dice-so-nice")&&game.modules.get("dice-so-nice").active){let a=null,s=!1;switch(t){case"blindroll":s=!0;break;case"gmroll":{const e=game.users.filter((e=>e.isGM)),t=[];e.forEach((e=>t.push(e.id))),a=t;break}case"roll":{const e=game.users.filter((e=>e.active)),t=[];e.forEach((e=>t.push(e.id))),a=t;break}case"selfroll":a=[game.user.id]}await game.dice3d.showForRoll(e,game.user,!0,a,s)}}static async _mergeRerolls(e,t){const a=[];let s=0;for(let i=0;i<t.length;i+=1){const n=t[i];if(n.index!==s){for(;s<n.index;){let t=e.shift();t.index=s,a.push(t),s++}a.push(n),s++}else a.push(n),s++}return[...a,...e]}}class r extends Application{constructor(e,t){super(e,t),this.actor=null,this.rollData=l.getDefaultCombatDiceRollOptions(),e&&(this.actor=e,this.rollData.actorId=this.actor.id),this.isActorRoll=!!this.actor,this.isNpc=!1,this.isPc=!1,this.isActorRoll&&(this.isNpc="npc"===this.actor.type,this.isPc=!this.isNpc)}static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{classes:["conan2d20","combat-dice-roller"],template:"systems/conan2d20/templates/apps/combat-dice-roller.html",width:200,height:"auto",submitOnChange:!1})}get title(){const e=game.i18n.localize("CONAN.CombatDice");return this.actor?`${e}: ${this.actor.name}`:e}activateListeners(e){super.activateListeners(e);const t=this;e.find(".roll-dice").click(this._onSubmit.bind(this)),e.find(".combat-dice-roller .quantity-grid").each((function(){const e=$(this),a=e.find('input[type="number"]'),s=e.find(".quantity-up"),i=e.find(".quantity-down"),n=a.attr("data-quantity-type"),[o,l]=n.split(".");a.on("change",(e=>{e.preventDefault(),t[`_change_${o}_${l}`](a)})),a.on("wheel",(e=>{e.preventDefault(),e.originalEvent.deltaY<0?t[`_inc_${o}_${l}`](a):e.originalEvent.deltaY>0&&t[`_dec_${o}_${l}`](a)})),s.click((e=>{e.preventDefault(),t[`_inc_${o}_${l}`](a)})),i.click((e=>{e.preventDefault(),t[`_dec_${o}_${l}`](a)}))}))}async getData(){return{actorData:duplicate(this.actor),isActorRoll:this.isActorRoll,isNpc:this.isNpc,isPc:this.isPc,rollData:this.rollData}}async _dec_base_numDice(e){let t=parseInt(e.val());t--,t<1&&(t=1),this.rollData.base.numDice=t,e.val(this.rollData.base.numDice)}async _inc_base_numDice(e){this.rollData.base.numDice++,e.val(this.rollData.base.numDice)}async _onSubmit(){this._rollDice()}async _rollDice(){this.close(),this.rollData.numDice=this.rollData.base.numDice+this.rollData.bonus.attribute;const e=await l.calculateCombatDiceRoll(this.rollData);this._showResults(e)}async _showResults(e){o.renderCombatDiceRollCard({actor:this.actor,results:e,rollData:this.rollData,type:"combatDice"})}async _updateAllFormValues(){const e=this;this.element.find(".quantity-grid").each((function(){const t=$(this).find('input[type="number"]');let a=t.attr("data-quantity-type");a=a.split(".");const s=e.rollData[a[0]]||{};t.val(s[a[1]])}))}}class c extends Application{constructor(e,t){super(e,t),this.rollData=l.getDefaultCombatDiceRollOptions(),this.actor=null,this.item=t?.item?t.item:null,this.attackType=t?.attackType||"melee",this.reloads=[],this.selectedReload="",e&&(this.actor=e,this.rollData.actorId=this.actor.id,this.reloads=this.actor.getMergedReloads()),t?.item&&(this.item=t.item,this.rollData.improvised=!!this.item.getQuality("improvised")),this.isActorRoll=!!this.actor,this.isNpc=!1,this.isPc=!1,this.isActorRoll&&(this.isNpc="npc"===this.actor.type,this.isPc=!this.isNpc),this.item&&(this.rollData.base.numDice=parseInt(this.item.system?.damage?.dice)||1,"npcattack"===this.item.type?this.attackType=this.item.system.attackType:"display"===this.item.type?this.attackType="threaten":"weapon"===this.item.type&&(this.attackType=this.item.system.weaponType)),this.damageTypes=[{type:"melee",active:"melee"===this.attackType,name:"Melee",tooltip:""},{type:"ranged",active:"ranged"===this.attackType,name:"Ranged",tooltip:""},{type:"threaten",active:"threaten"===this.attackType,name:"Threaten",tooltip:""}],this._updateDamageType()}static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{classes:["conan2d20","damage-roller"],template:"systems/conan2d20/templates/apps/damage-roller.html",width:280,height:"auto",submitOnChange:!1})}get title(){const e=game.i18n.localize("CONAN.damageRollerTitle");return this.actor?`${e}: ${this.actor.name}`:e}activateListeners(e){super.activateListeners(e);const t=this;e.find(".damage-roller select").on("change",this._onChangeLoad.bind(this)),e.find(".roll-dice").click(this._onSubmit.bind(this)),e.find(".damage-roller .damage-type").on("click",this._onClickTypeButton.bind(this)),e.find(".damage-roller .quantity-grid").each((function(){const e=$(this),a=e.find('input[type="number"]'),s=e.find(".quantity-up"),i=e.find(".quantity-down"),n=a.attr("data-quantity-type"),[o,l]=n.split(".");a.on("wheel",(e=>{e.preventDefault(),e.originalEvent.deltaY<0?t[`_inc_${o}_${l}`](a):e.originalEvent.deltaY>0&&t[`_dec_${o}_${l}`](a)})),s.click((e=>{e.preventDefault(),t[`_inc_${o}_${l}`](a)})),i.click((e=>{e.preventDefault(),t[`_dec_${o}_${l}`](a)}))}))}async getData(){return{actorData:duplicate(this.actor),itemData:duplicate(this.item),damageTypes:this.damageTypes,isActorRoll:this.isActorRoll,isNpc:this.isNpc,isPc:this.isPc,rollData:this.rollData,reloads:this.reloads,disableReloads:this._disableReloads(),reloadsAvailable:this.reloads.length>0}}async _dec_base_numDice(e){let t=parseInt(e.val());t--,t<1&&(t=1),this.rollData.base.numDice=t,e.val(this.rollData.base.numDice)}async _dec_bonus_other(e){0!==parseInt(e.val())&&(this.rollData.bonus.other--,e.val(this.rollData.bonus.other))}async _dec_bonus_reloads(e){0!==parseInt(e.val())&&(this.rollData.bonus.reloads--,e.val(this.rollData.bonus.reloads))}async _dec_bonus_talent(e){0!==parseInt(e.val())&&(this.rollData.bonus.talent--,e.val(this.rollData.bonus.talent))}async _dec_spends_doom(e){0!==parseInt(e.val())&&(this.rollData.spends.doom--,e.val(this.rollData.spends.doom))}async _dec_spends_momentum(e){0!==parseInt(e.val())&&(this.rollData.spends.momentum--,e.val(this.rollData.spends.momentum))}_disableReloads(){return"ranged"!==this.attackType||0===this.reloads.length}async _inc_base_numDice(e){this.rollData.base.numDice++,e.val(this.rollData.base.numDice)}async _inc_bonus_other(e){this.rollData.bonus.other++,e.val(this.rollData.bonus.other)}async _inc_bonus_reloads(e){const t=this.reloads.find((e=>e.name===this.selectedReload));this.rollData.bonus.reloads<t.uses&&(this.rollData.bonus.reloads++,e.val(this.rollData.bonus.reloads))}async _inc_bonus_talent(e){this.rollData.bonus.talent++,e.val(this.rollData.bonus.talent)}async _inc_spends_doom(e){let t=parseInt(e.val()),a=0;a=this.actor?await this.actor.getAvailableDoom():game.settings.get("conan2d20","doom"),a-t>0&&(this.rollData.spends.doom++,e.val(this.rollData.spends.doom))}async _inc_spends_momentum(e){let t=parseInt(e.val()),a=0;a=this.actor?await this.actor.getAvailableMomentum():game.settings.get("conan2d20","momentum"),a-t>0&&(this.rollData.spends.momentum++,e.val(this.rollData.spends.momentum))}async _onChangeLoad(e){const t=$(e.target).val(),a=this.element.find(".reload-quantity");""!==t?a.removeClass("disable-entry"):a.addClass("disable-entry"),this._setReloadsQuantity(0),this.selectedReload=t}async _onClickTypeButton(e){e.preventDefault();const t=$(e.target),a=t.attr("data-damage-type");if(a!==this.attackType){if(this.attackType=a,t.siblings().removeClass("active"),t.addClass("active"),this.item)if("ranged"===a&&"melee"!==this.item.system.weaponType){const e=this.element.find(".reload-choice");e.removeClass("disable-entry"),""!==e.find(":selected").val()&&this.element.find(".reload-quantity").removeClass("disable-entry")}else this.element.find(".reload-quantity").addClass("disable-entry"),this._setReloadsQuantity(0),this.element.find(".reload-choice").addClass("disable-entry");this.actor&&this._updateDamageType()}}async _onSubmit(){this.item&&(this.rollData.itemData=await this.item.getChatData()),this._rollDice()}async _rollDice(){if(this.close(),this.rollData.numDice=this.rollData.base.numDice+this.rollData.bonus.attribute+this.rollData.bonus.other+this.rollData.bonus.reloads+this.rollData.bonus.talent,this.actor){if(s.spendMomentum(this.actor,this.rollData.spends.momentum),s.spendDoom(this.actor,this.rollData.spends.doom),this.rollData.bonus.reloads>0){const e=this.reloads.find((e=>e.name===this.selectedReload));this.actor.spendReloads(e,this.rollData.bonus.reloads)}}else t.changeCounter(-`${this.rollData.spends.momentum}`,"momentum"),t.changeCounter(-`${this.rollData.spends.doom}`,"doom");const e=await l.calculateCombatDiceRoll(this.rollData);"threaten"===this.attackType&&(e.location=null),this._showResults(e)}async _setReloadsQuantity(e){this.element.find(".reload-quantity").find('input[type="number"]').val(e),this.rollData.bonus.reloads=e}async _showResults(e){o.renderDamageRollCard({actor:this.actor,item:this.item,results:e,rollData:this.rollData,type:"damage"})}async _updateDamageType(){if(console.log(this.attackType),this.actor){const e=this.actor._attackBonuses();this.rollData.bonus.attribute=e[this.attackType]}"threaten"===this.attackType?this.rollData.damage.type="Mental":this.rollData.damage.type="Physical";const e=game.i18n.localize("CONAN.damageRollerTitle"),t=game.i18n.localize(`CONAN.attackTypes.${this.attackType}`);this.rollData.title=`${t} ${e}`}}class u extends Application{constructor(e,t){super(e,t),this.actor=null,this.rollData=l.getDefaultCombatDiceRollOptions(),e&&(this.actor=e,this.rollData.actorId=this.actor.id),this.isActorRoll=!!this.actor,this.isNpc=!1,this.isPc=!1,this.isActorRoll&&(this.isNpc="npc"===this.actor.type,this.isPc=!this.isNpc),this.soakType=t?.type||"cover",this.rollData.itemName=t?.itemName||null,this.rollData.base.numDice=t?.soak||1,this.presetTitle=null,this.rollData.title=game.i18n.localize("CONAN.SoakDice"),this.coverPresets=[{active:!1,name:game.i18n.localize("CONAN.LightCover"),numDice:2,tooltip:game.i18n.localize("CONAN.LightCoverTooltip")},{active:!1,name:game.i18n.localize("CONAN.HeavyCover"),numDice:4,tooltip:game.i18n.localize("CONAN.HeavyCoverTooltip")}],this.moralePresets=[{active:!1,name:game.i18n.localize("CONAN.MinorMorale"),numDice:2,tooltip:game.i18n.localize("CONAN.MinorMoraleTooltip")},{active:!1,name:game.i18n.localize("CONAN.MajorMorale"),numDice:4,tooltip:game.i18n.localize("CONAN.MajorMoraleTooltip")}],this.soakTypes=[{active:"cover"===this.soakType,name:game.i18n.localize("CONAN.soakCover"),value:"cover",tooltip:game.i18n.localize("CONAN.LightCoverTooltip")},{active:"morale"===this.soakType,name:game.i18n.localize("CONAN.soakMorale"),value:"morale",tooltip:game.i18n.localize("CONAN.HeavyCoverTooltip")}]}static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{classes:["conan2d20","soak-dice-roller"],template:"systems/conan2d20/templates/apps/soak-dice-roller.html",width:200,height:"auto",submitOnChange:!1})}get title(){const e=game.i18n.localize("CONAN.SoakDice");return this.actor?`${e}: ${this.actor.name}`:e}activateListeners(e){super.activateListeners(e);const t=this;e.find(".roll-dice").click(this._onSubmit.bind(this)),e.find(".soak-dice-roller .soak-preset").on("click",this._onClickPresetButton.bind(this)),e.find(".soak-dice-roller .soak-type").on("click",this._onClickTypeButton.bind(this)),e.find(".soak-dice-roller .quantity-grid").each((function(){const e=$(this),a=e.find('input[type="number"]'),s=e.find(".quantity-up"),i=e.find(".quantity-down"),n=a.attr("data-quantity-type"),[o,l]=n.split(".");a.on("wheel",(e=>{e.preventDefault(),t._clearPresets(),e.originalEvent.deltaY<0?t[`_inc_${o}_${l}`](a):e.originalEvent.deltaY>0&&t[`_dec_${o}_${l}`](a)})),s.click((e=>{e.preventDefault(),t._clearPresets(),t[`_inc_${o}_${l}`](a)})),i.click((e=>{e.preventDefault(),t._clearPresets(),t[`_dec_${o}_${l}`](a)}))}))}async getData(){return{actorData:duplicate(this.actor),coverPresets:this.coverPresets,isActorRoll:this.isActorRoll,isNpc:this.isNpc,isPc:this.isPc,itemName:this.rollData.itemName,moralePresets:this.moralePresets,rollData:this.rollData,soakType:this.soakType,soakTypes:this.soakTypes}}async _dec_base_numDice(e){let t=parseInt(e.val());t--,t<1&&(t=1),this.rollData.base.numDice=t,e.val(this.rollData.base.numDice)}async _inc_base_numDice(e){this.rollData.base.numDice++,e.val(this.rollData.base.numDice)}async _clearPresets(){this.element.find(".soak-dice-roller .soak-preset").removeClass("active"),this.presetTitle=null,this._updateTitle()}async _onClickPresetButton(e){e.preventDefault();const t=$(e.target),a=parseInt(t.attr("data-preset"));e.target.classList.contains("active")?this.presetTitle=null:(this.rollData.base.numDice=a,this._updateAllFormValues(),this.presetTitle=e.target.innerText),this.element.find(".soak-dice-roller .soak-preset").removeClass("active"),t.toggleClass("active")}async _onClickTypeButton(e){e.preventDefault();const t=$(e.target),a=t.attr("data-soak-type");a!==this.soakType&&(this.soakType=a,this.element.find(".cover-presets").toggle(),this.element.find(".morale-presets").toggle(),this.element.find(".soak-dice-roller .soak-preset").removeClass("active"),t.siblings().removeClass("active"),t.addClass("active"))}async _onSubmit(){this._updateTitle(),this._rollDice()}async _rollDice(){this.close(),this.rollData.numDice=this.rollData.base.numDice+this.rollData.bonus.attribute;const e=await l.calculateCombatDiceRoll(this.rollData);this._showResults(e)}async _showResults(e){o.renderSoakDiceRollCard({actor:this.actor,item:this.rollData.item,results:e,rollData:this.rollData,type:"soak"})}async _updateAllFormValues(){const e=this;this.element.find(".quantity-grid").each((function(){const t=$(this).find('input[type="number"]');let a=t.attr("data-quantity-type");a=a.split(".");const s=e.rollData[a[0]]||{};t.val(s[a[1]])}))}async _updateTitle(){let e=null;"cover"===this.soakType?e=game.i18n.localize("CONAN.soakCover"):"morale"===this.soakType&&(e=game.i18n.localize("CONAN.soakMorale"));let t=this.presetTitle;const a=game.i18n.localize("CONAN.Soak");let s=`${e}`;t&&(s=`${t} ${s}`),this.rollData.title=`${s} ${a}`}}class d{static async basicSkillRoll(){return(new n).render(!0)}static async combatDiceRoll(){(new r).render(!0)}static async coverSoakDiceRoll(e=null,t=1){return d.soakDiceRoll("cover",e,t)}static async createItemMacro(e,t){const a=await Item.implementation.fromDropData(e);if(!a)return ui.notifications.warn(game.i18n.localize("CONAN.Macro.Warn.CreateItemRequiresOwnership"));const s={command:`game.conan2d20.macros.postItem("${e.uuid}")`,flags:{"conan2d20.itemMacro":!0},img:a.img,name:a.name,scope:"actor",type:"script"},i=game.macros.find((e=>e.name===s.name&&e.command===s.command&&e.author.isSelf))||await Macro.create(s);game.user.assignHotbarMacro(i,t)}static async damageRoll(e=null){const t=await d._getMacroActor();let a=null;if(e){if(t?a=t.getItemByName(e):game.user.isGM&&(a=game.items.find((t=>t.name===e))||null),!a)return ui.notifications.error(game.i18n.format("CONAN.Macro.Error.NoSuchItem",{itemName:e}));if(!a.canCauseDamage())return ui.notifications.error(game.i18n.format("CONAN.Macro.Error.ItemCannotCauseDamage",{itemName:e}))}return new c(t,{item:a}).render(!0)}static async initGame(){if(!game.user.isGM)return ui.notifications.error(game.i18n.format("CONAN.Macro.Error.GameMasterRoleRequired",{macro:"Initialize Game"}));try{const e=game.users.players;let a=0;for(const t of e){const e=t.character;if(!e)continue;e.update({"system.health.mental.value":e.getMaxResolve()}),e.update({"system.health.physical.value":e.getMaxVigor()});const s=e.system.resources.fortune.max;e.update({"system.resources.fortune.value":s}),a+=s,e.update({"system.momentum":0})}return t.setCounter(0,"momentum"),t.setCounter(a,"doom"),ui.notifications.info(game.i18n.format("CONAN.Macro.Success",{macro:"Initialize Game"}))}catch(e){return ui.notifications.error(game.i18n.format("CONAN.Macro.Error.CaughtError",{macro:"Initialize Game",error:e}))}}static async moraleSoakDiceRoll(e=null,t=1){return d.soakDiceRoll("morale",e,t)}static async newScene(){if(!game.user.isGM)return ui.notifications.error(game.i18n.format("CONAN.Macro.Error.GameMasterRoleRequired",{macro:"New Scene"}));try{const e=game.users.players;for(const t of e){const e=t.character;e&&(e.update({"system.health.mental.value":e.getMaxResolve()}),e.update({"system.health.physical.value":e.getMaxVigor()}),e.update({"system.momentum":0}))}return t.changeCounter(-1,"momentum"),ui.notifications.info(game.i18n.format("CONAN.Macro.Success",{macro:"New Scene"}))}catch(e){return ui.notifications.error(game.i18n.format("CONAN.Macro.Error.CaughtError",{macro:"New Scene",error:e}))}}static async postItem(e){(await fromUuid(e)).postItem()}static async skillRoll(e=null){const t=await d._getMacroActor();if(!t)return(new n).render(!0);const a={};if(e){if(e||="",e=e.toLowerCase(),"npc"===t.type){for(let t in CONFIG.CONAN.expertiseFields)if(CONFIG.CONAN.expertiseFields[t].toLowerCase()===e){a.expertise=t,a.attribute=CONFIG.CONAN.expertiseAttributeMap[t];break}}else for(let t in CONFIG.CONAN.skills)if(CONFIG.CONAN.skills[t].toLowerCase()===e){a.skill=t,a.attribute=CONFIG.CONAN.skillAttributeMap[t];break}if(!a.attribute||!a.expertise&&!a.skill)return ui.notifications.warn(game.i18n.format("CONAN.Macro.Error.UnknownSkill",{skillName:e,actorName:t.name}))}return t?new n(t,a).render(!0):void 0}static async soakDiceRoll(e="cover",t=null,a=1){const s=await d._getMacroActor();new u(s,{type:e,itemName:t,soak:a}).render(!0)}static async _getMacroActor(){let e=null;if(game.user.isGM){const t=canvas.tokens.controlled.length;if(t>0){if(1!==t)return ui.notifications.warn(game.i18n.format("CONAN.Macro.Error.TooManyTokensSelected",{max:1}));e=canvas.tokens.controlled[0].actor}}else e=game.user.character;return e}}class m extends DiceTerm{constructor(e){super(e),this.faces=6}static DENOMINATION="p";static values={1:1,2:2,3:0,4:0,5:0,6:0};static getResultLabel(e){return e>2?"&nbsp":e}get total(){return this._evaluated?this.results.reduce(((e,t)=>t.active?t.effect?e+1:void 0!==t.count?e+t.count:e+m.getValue(t.result):e),0):null}roll(e){const t=super.roll(e);return t.effect=5===t.result||6===t.result,t}get resultValues(){return this.results.map((e=>m.getResultLabel(e.result)))}static getValue(e){return"string"==typeof m.values[e]?1:m.values[e]}}class p extends Item{prepareData(){super.prepareData()}async postItem(){const e={actorId:"",item:this.toObject(!1),data:await this.getChatData()};let t="";this.actor&&(e.actorId=this.actor.id,this.actor.isToken&&(t=this.actor.token.id));const a=`systems/conan2d20/templates/chat/${this.type}-card.html`,s=await renderTemplate(a,e),i={user:game.user.id,speaker:null,type:CONST.CHAT_MESSAGE_TYPES.OTHER,content:s};this.actor&&(i.speaker=ChatMessage.getSpeaker({actor:this.actor,token:this.actor.token})),ChatMessage.create(i,{displaySheet:!1}).then((e=>{e.setFlag("conan2d20","itemId",this._id),e.setFlag("conan2d20","tokenId",t)}))}async getChatData(e={}){const t=this[`_${this.type}ChatData`]();return e={...e,async:!0},t&&(t.description.value=await TextEditor.enrichHTML(t.description.value,e)),t}canCauseDamage(){return"weapon"===this.type||"npcattack"===this.type||"display"===this.type}getQuality(e){const t=duplicate(this.system);let a;if(0!==(t.qualities.value||[]).length)for(let s=0;s<t.qualities.value.length;s+=1)if(t.qualities.value[s].type===e){a=t.qualities.value[s];break}return a}getSoak(){const e=this.getQuality("shieldx");return void 0!==e?parseInt(e.value):0}triggerDamageRoll(){const e={item:this};new c(this.actor,e).render(!0)}triggerSoakRoll(){const e={type:"cover",itemName:this.name,soak:this.getSoak()};new u(this.actor,e).render(!0)}skillToUse(e){if("npc"===e){if("melee"===this.system.attackType)return"cmb";if("ranged"===this.system.attackType)return"cmb";if("threaten"===this.system.attackType)return"scl"}if("character"===e){if(this.system.skillOverride&&""!==this.system.skillOverride)return this.system.skillOverride;if("melee"===this.system.weaponType)return"mel";if("ranged"===this.system.weaponType)return"ran";if("display"===this.type)return this.system.skill;if("spell"===this.type)return"sor"}}_actionChatData(){if("action"!==this.type)throw new Error("tried to create an action chat data for a non-action item");const e=duplicate(this.system);let t=null;e.weapon.value&&(t=this.actor.getEmbeddedDocument(e.weapon.value));const a=[CONFIG.CONAN.actionTypes[e.actionType],CONFIG.CONAN.actionCounts[e.actionCount],CONFIG.CONAN.actionCategories[e.actionCategory],t?t.name:null];return e.properties=a.filter((e=>e)),e}_enchantmentChatData(){if("enchantment"!==this.type)throw new Error("tried to create a spell chat data for a non-spell item");const e=duplicate(this.system),t=e.effects.value,a=[],s=[],i=[];if(0!==(t||[]).length){let e;for(let a=0;a<t.length;a+=1){if(t[a].value)e={label:`${t[a].label} ${t[a].value}`||t[a].label.charAt(0).toUpperCase()+t[a].label.slice(1),description:CONFIG.CONAN.qualitiesDescriptions[t[a].label.replace(" ","").toLowerCase()]||""};else{const s=t[a].label;e={label:CONFIG.CONAN.weaponQualities[s]||t[a].label.charAt(0).toUpperCase()+t[a].label.slice(1),description:CONFIG.CONAN.qualitiesDescriptions[t[a].label.replace(" ","").toLowerCase()]||""}}i.push(e)}}const n={label:"CONAN.enchantmentTypeLabel",detail:CONFIG.CONAN.enchantmentTypes[e.enchantmentType]};if(s.push(n),"Exploding Powder"===n.detail){const t={label:"CONAN.enchantmentDamageLabel",detail:CONFIG.CONAN.damageDice[e.damage.dice]},a={label:"CONAN.enchantmentItemLabel",detail:CONFIG.CONAN.enchantmentExplodingItems[e.traits.explodingItem]},i={label:"CONAN.enchantmentStrengthLabel",detail:CONFIG.CONAN.enchantmentStrengths[e.traits.strength]};s.push(a),s.push(t),s.push(i)}else if("Blinding Powder"===n.detail){const t={label:"CONAN.enchantmentDamageLabel",detail:CONFIG.CONAN.damageDice[e.damage.dice]},a={label:"CONAN.enchantmentStrengthLabel",detail:CONFIG.CONAN.enchantmentBlindingStrengths[e.traits.strength]};s.push(a),s.push(t)}else if("Burning Liquid"===n.detail){const t={label:"CONAN.enchantmentDamageLabel",detail:CONFIG.CONAN.damageDice[e.damage.dice]},a={label:"CONAN.enchantmentVolatilityLabel",detail:CONFIG.CONAN.enchantmentVolatilities[e.traits.volatility]};s.push(t),s.push(a)}else if("Reinforced Fabric"===n.detail){const t={label:"CONAN.enchantmentIngredientsLabel",detail:CONFIG.CONAN.enchantmentIngredients[e.traits.ingredients]},i=game.i18n.localize.bind(game.i18n);if(0!==(e.damage.hitLocation||[]).length)for(let t=0;t<e.damage.hitLocation.value.length;t+=1)a.push(`${e.damage.hitLocation.value[t]} ${i("CONAN.coverageLabel")}`);e.properties=a.filter((e=>null!==e)),s.push(t)}else if("Upas-Glass"===n.detail){const t={label:"CONAN.enchantmentCoverLabel",detail:CONFIG.CONAN.damageDice[e.damage.dice]},a={label:"CONAN.upasGlassSizeLabel",detail:CONFIG.CONAN.upasGlassSizes[e.traits.size]};s.push(a),s.push(t)}else if("Talisman"===n.detail){const t={label:"CONAN.enchantmentHindranceLabel",detail:e.traits.hindrance},a={label:"CONAN.enchantmentTalismanLabel",detail:CONFIG.CONAN.enchantmentTalismanTypes[e.traits.talismanType]};s.push(t),s.push(a)}else{const t={label:"CONAN.lotusPollenUseLabel",detail:CONFIG.CONAN.lotusPollenUses[e.traits.lotusPollenUse]},a={label:"CONAN.lotusPollenColorLabel",detail:CONFIG.CONAN.lotusPollenColors[e.traits.lotusPollenColor]},i={label:"CONAN.lotusPollenFormLabel",detail:CONFIG.CONAN.lotusPollenForms[e.traits.lotusPollenForm]};s.push(t),s.push(a),s.push(i)}return e.itemDetails=s.filter((e=>null!==e)),e.qualities=i.filter((e=>!!e)),e}_spellChatData(){if("spell"!==this.type)throw new Error("tried to create a spell chat data for a non-spell item");const e=duplicate(this.system),t=[];if(e.difficulty.includes){const a={label:"CONAN.difficultyIncludesLabel",detail:e.difficulty.includes};t.push(a)}if(e.duration){const a={label:"CONAN.spellDurationLabel",detail:e.duration};t.push(a)}if(e.cost){const a={label:"CONAN.spellCostLabel",detail:e.cost};t.push(a)}if(e.notes){const a={label:"CONAN.spellNotesHeader",detail:e.notes};t.push(a)}return e.itemDetails=t.filter((e=>null!==e)),e}_armorChatData(){if("armor"!==this.type)throw new Error("tried to create an armor chat data for a non-armor item");const e=game.i18n.localize.bind(game.i18n),t=duplicate(this.system),a=[];if(0!==(t.qualities.value||[]).length)for(let e=0;e<t.qualities.value.length;e+=1){const s={label:CONFIG.armorQualities[t.qualities.value[e]]||t.qualities.value[e].charAt(0).toUpperCase()+t.qualities.value[e].slice(1),description:CONFIG.qualitiesDescriptions[t.qualities.value[e]]||""};a.push(s)}const s=[`${e(CONFIG.CONAN.armorTypes[t.armorType])}`,`${t.soak||0} ${e("CONAN.armorSoakLabel")}`,t.equipped?e("CONAN.armorEquippedLabel"):null];if(0!==(t.coverage.value||[]).length)for(let a=0;a<t.coverage.value.length;a+=1)s.push(`${t.coverage.value[a]} ${e("CONAN.coverageLabel")}`);return t.properties=s.filter((e=>null!==e)),t.qualities=a.filter((e=>!!e)),t}_kitChatData(){if("kit"!==this.type)throw new Error("tried to create a kit chat data for a non-kit item");const e=game.i18n.localize.bind(game.i18n),t=duplicate(this.system);return t.kitTypeString=CONFIG.kitTypes[t.kitType],t.properties=[t.kitTypeString,`${t.uses.value}/${t.uses.max} ${e("CONAN.kitUsesLabel")}`],t.hasCharges=t.uses.value>=0,t}_transportationChatData(){if("transportation"!==this.type)throw new Error("tried to create a transportation chat data for a non-transpo item");const e=[],t=duplicate(this.system);if(t.category){const a={label:"CONAN.transpoCategoryLabel",detail:CONFIG.CONAN.transpoCategories[t.category]};e.push(a)}if(t.transpoType){let a;a="mounts"===t.category?{label:"CONAN.transpoTypeLabel",detail:CONFIG.CONAN.transpoMountTypes[t.transpoType]}:"carts"===t.category?{label:"CONAN.transpoTypeLabel",detail:CONFIG.CONAN.transpoCartTypes[t.transpoType]}:{label:"CONAN.transpoTypeLabel",detail:CONFIG.CONAN.transpoBoatTypes[t.transpoType]},e.push(a)}if(t.passengers.capacity){const a={label:"CONAN.transpoPassengerCapLabel",detail:String(t.passengers.capacity)};e.push(a)}if(""!==t.capabilities){const a={label:"CONAN.transpoCapabilitiesLabel",detail:CONFIG.CONAN.transpoCapabilities[t.capabilities]};e.push(a)}if(""!==t.animals){const a={label:"CONAN.transpoAnimalsLabel",detail:CONFIG.CONAN.transpoAnimals[t.animals]};e.push(a)}return t.itemDetails=e.filter((e=>null!==e)),t}_talentChatData(){if("talent"!==this.type)throw new Error("tried to create a talent chat data for a non-talent item");const e=duplicate(this.system),t=[],a=[`Rank ${e.rank.value||0}`,CONFIG.CONAN.skills[e.skill],e.actionType?CONFIG.CONAN.actionTypes[e.actionType]:null];if(e.properties=a.filter((e=>e)),e.prerequisites){const a={label:"CONAN.talentRequiresLabel",detail:e.prerequisites};t.push(a)}const s=[];if(0!==(e.qualities||[]).length)for(let t=0;t<e.qualities.value.length;t+=1){const a={label:CONFIG.CONAN.talentQualities[e.qualities.value[t]]||e.qualities.value[t].charAt(0).toUpperCase()+e.qualities.value[t].slice(1),description:CONFIG.CONAN.qualitiesDescriptions[e.qualities.value[t]]||""};s.push(a)}if(e.talentType){const t={label:`${e.talentType||""}`,description:`${e.description} || ''`};s.push(t)}return e.itemDetails=t.filter((e=>null!==e)),e.qualities=s.filter((e=>e)),e}_weaponChatData(){if("weapon"!==this.type)throw new Error("tried to create a weapon chat data for a non-weapon item");const e=duplicate(this.system),t=[],a=[],s=[];if(0!==(e.qualities.value||[]).length){let a;for(let s=0;s<e.qualities.value.length;s+=1)"shieldx"===e.qualities.value[s].type&&(e.hasShieldSoak=!0,e.shieldSoak=parseInt(e.qualities.value[s].value)||1),a=e.qualities.value[s].value?{label:`${e.qualities.value[s].label} ${e.qualities.value[s].value}`||e.qualities.value[s].label.charAt(0).toUpperCase()+e.qualities.value[s].label.slice(1),description:CONFIG.CONAN.qualitiesDescriptions[e.qualities.value[s].label.replace(" ","").toLowerCase()]||""}:{label:CONFIG.CONAN.weaponQualities[e.qualities.value[s].label]||e.qualities.value[s].label.charAt(0).toUpperCase()+e.qualities.value[s].label.slice(1),description:CONFIG.CONAN.qualitiesDescriptions[e.qualities.value[s].label.replace(" ","").toLowerCase()]||""},t.push(a)}const i={label:"CONAN.groupLabel",detail:CONFIG.CONAN.weaponGroups[e.group]};s.push(i);const n={label:"CONAN.baseDamageLabel",detail:CONFIG.CONAN.damageDice[e.damage.dice]};let o;return s.push(n),o="ranged"===e.weaponType?{label:"CONAN.rangeLabel",detail:CONFIG.CONAN.weaponRanges[e.range]}:{label:"CONAN.reachLabel",detail:CONFIG.CONAN.weaponReaches[e.range]},s.push(o),e.size&&a.push(CONFIG.CONAN.weaponSizes[e.size]),e.properties=a.filter((e=>!!e)),e.itemDetails=s.filter((e=>null!==e)),e.qualities=t.filter((e=>!!e)),e}_npcattackChatData(){if("npcattack"!==this.type)throw new Error("tried to create an NPC Attack chat data for an incorrect item");const e=duplicate(this.system),t=[],a=[];if(0!==(e.qualities.value||[])){let a;for(let s=0;s<e.qualities.value.length;s+=1)a=e.qualities.value[s].value?{label:`${e.qualities.value[s].label} ${e.qualities.value[s].value}`||e.qualities.value[s].label.charAt(0).toUpperCase()+e.qualities.value[s].label.slice(1),description:CONFIG.CONAN.qualitiesDescriptions[e.qualities.value[s].label.replace(" ","").toLowerCase()]||""}:{label:CONFIG.CONAN.weaponQualities[e.qualities.value[s].label]||e.qualities.value[s].label.charAt(0).toUpperCase()+e.qualities.value[s].label.slice(1),description:CONFIG.CONAN.qualitiesDescriptions[e.qualities.value[s].label.replace(" ","").toLowerCase()]||""},t.push(a)}const s={label:"CONAN.damageLabel",detail:CONFIG.CONAN.damageDice[e.damage.dice]};a.push(s);const i={label:"CONAN.damageTypeLabel",detail:CONFIG.CONAN.damageTypes[e.damage.type]};let n;return a.push(i),n="ranged"===e.attackType||"threaten"===e.attackType?{label:"CONAN.rangeLabel",detail:CONFIG.CONAN.weaponRanges[e.range]}:{label:"CONAN.reachLabel",detail:CONFIG.CONAN.weaponReaches[e.range]},a.push(n),e.itemDetails=a.filter((e=>null!==e)),e.qualities=t.filter((e=>!!e)),e}_miscellaneousChatData(){if("miscellaneous"!==this.type)throw new Error("tried to create an npcaction chat data for a non-npcaction item");return duplicate(this.system)}_npcactionChatData(){if("npcaction"!==this.type)throw new Error("tried to create an npcaction chat data for a non-npcaction item");const e=duplicate(this.system),t=[CONFIG.CONAN.npcActionTypes[e.actionType]];return e.properties=t.filter((e=>e)),e}_displayChatData(){if("display"!==this.type)throw new Error("tried to create a display chat data for a non-display item");const e=duplicate(this.system),t=[],a=[];if(0!==(e.qualities.value||[]).length){let a;for(let s=0;s<e.qualities.value.length;s+=1)a=e.qualities.value[s].value?{label:`${e.qualities.value[s].label} ${e.qualities.value[s].value}`||e.qualities.value[s].label.charAt(0).toUpperCase()+e.qualities.value[s].label.slice(1),description:CONFIG.CONAN.qualitiesDescriptions[e.qualities.value[s].label.replace(" ","").toLowerCase()]||""}:{label:CONFIG.CONAN.weaponQualities[e.qualities.value[s].label]||e.qualities.value[s].label.charAt(0).toUpperCase()+e.qualities.value[s].label.slice(1),description:CONFIG.CONAN.qualitiesDescriptions[e.qualities.value[s].label.replace(" ","").toLowerCase()]||""},t.push(a)}const s={label:"CONAN.displaySkillLabel",detail:CONFIG.CONAN.skills[e.skill]};a.push(s);const i={label:"CONAN.baseDamageLabel",detail:CONFIG.CONAN.damageDice[e.damage.dice]};a.push(i);const n={label:"CONAN.rangeLabel",detail:CONFIG.CONAN.weaponRanges[e.range]};return a.push(n),e.properties=[].filter((e=>!!e)),e.itemDetails=a.filter((e=>null!==e)),e.qualities=t.filter((e=>!!e)),e}}class h{latestVersion;migrations;constructor(e){this.migrations=e.sort(((e,t)=>e.version-t.version)),this.latestVersion=Math.max.apply(null,this.migrations.map((e=>e.version)))}needsMigration(e,t){return e<this.latestVersion}diffItems(e,t){const a={inserted:[],deleted:[],updated:[]},s=new Map;for(const t of e)s.set(t._id,t);for(const e of t)if(s.has(e._id)){const t=s.get(e._id);JSON.stringify(t)!==JSON.stringify(e)&&a.updated.push(e),s.delete(e._id)}else a.inserted.push(e);for(const e of s.values())a.deleted.push(e._id);return a}async getUpdatedItem(e,t){const a=duplicate(e);for(const e of t)try{await e.updateItem(a,void 0)}catch(e){console.error(e)}return a}async getUpdatedActor(e,t){const a=duplicate(e);for(const e of t)try{await e.updateActor(a);for(const t of a.items)await e.updateItem(t)}catch(e){console.error(e)}return a}async getUpdatedUser(e,t){const a=duplicate(e);for(const e of t)try{await e.updateUser(a)}catch(e){console.error(e)}return a}}class N extends h{latestVersion;migrations;constructor(e){super(e),this.migrations=e.sort(((e,t)=>e.version-t.version)),this.latestVersion=Math.max.apply(null,this.migrations.map((e=>e.version)))}needsMigration(){return super.needsMigration(game.settings.get("conan2d20","worldSchemaVersion"))}async migrateCompendium(e,t){try{const a=e.documentName,s=e.locked;await e.configure({locked:!1}),await e.migrate();const i=await e.getDocuments(),n=[];for(const a of i)switch(e.documentName){case"Actor":n.push(this.migrateWorldActor(a,t));break;case"Item":n.push(this.migrateWorldItem(a,t));break;case"Scene":for(const e of a.tokens)n.push(this.migrateSceneToken(a,e,t))}await Promise.all(n),await e.configure({locked:s}),console.log(`Migrated all ${a} documents from Compendium ${e.collection}`)}catch(e){console.log(e)}}async migrateWorldItem(e,t){try{const a=await this.getUpdatedItem(e,t),s=diffObject(e,a);foundry.utils.isEmpty(s)||await e.update(s,{enforceTypes:!1})}catch(e){console.error(e)}}async migrateWorldActor(e,t){try{const a=duplicate(e),s=await this.getUpdatedActor(a,t),i=a.items,n=s.items;delete a.items,delete s.items,JSON.stringify(a)!==JSON.stringify(s)&&await e.update(s,{enforceTypes:!1});const o=this.diffItems(i,n);o.deleted.length>0&&await e.deleteEmbeddedDocuments("Item",o.deleted),o.inserted.length>0&&await e.createEmbeddedDocuments("Item",o.inserted),o.updated.length>0&&await e.updateEmbeddedDocuments("Item",o.updated)}catch(e){console.error(e)}}async migrateUser(e,t){const a=duplicate(e),s=await this.getUpdatedUser(a,t);try{const t=diffObject(e,s);foundry.utils.isEmpty(t)||await e.update(t,{enforceTypes:!1})}catch(e){console.error(e)}}async migrateSceneToken(e,t,a){try{if(t.actorLink||!game.actors.has(t.actorId))return;const s=duplicate(game.actors.get(t.actorId)),i=mergeObject(s,t.actorData,{inplace:!1}),n=await this.getUpdatedActor(i,a),o=diffObject(i,n);if(!foundry.utils.isEmpty(o)){const a=Object.fromEntries(Object.entries(o).map((([e,t])=>[`actorData.${e}`,t])));t.id,await e.updateEmbeddedDocuments("Token",[{id:t.id,...a}],{enforceTypes:!1})}}catch(e){console.error(e)}}async runMigrations(e){let t=[];for(const a of game.actors)t.push(this.migrateWorldActor(a,e));for(const a of game.items)t.push(this.migrateWorldItem(a,e));for(const a of game.users)t.push(this.migrateUser(a,e));for(const a of game.packs)"world"===a.metadata.packageType&&["Actor","Item","Scene"].includes(a.documentName)&&t.push(this.migrateCompendium(a,e));for(const a of e)t.push(a.migrate());await Promise.all(t),t=[];for(const a of game.scenes)for(const s of a.tokens)t.push(this.migrateSceneToken(a,s,e));await Promise.all(t)}async runMigration(){const e=game.system.version,t=game.settings.get("conan2d20","worldSchemaVersion");ui.notifications.info(`Applying Conan2d20 System Migration to version ${e}. Please be patient and do not close your game or shut down your server.`);const a=this.migrations.filter((e=>t<e.version)),s=[[]];for(const e of a)s[s.length-1].push(e),e.requiresFlush&&s.push([]);for(const e of s)e.length>0&&await this.runMigrations(e);game.settings.set("conan2d20","worldSchemaVersion",this.latestVersion),ui.notifications.info(`CONAN2D20 System Migration to version ${e} completed!`)}}class g{static version;version=this.constructor.version;requiresFlush=!1;async updateActor(e){}async updateItem(e,t){}async updateUser(e){}async migrate(){}}class y extends g{static version=.031421;async updateItem(e){"talent"===e.type&&e.system.skill&&(console.log("Conan2d20 System | Found Talent item from previous schema. Migrating item schema."),e.system.tree||(e.system.tree=game.i18n.localize(CONFIG.skills[e.system.skill])||""),console.log("Conan2d20 System | Removing unused field in item schema."),delete e.system.skill)}}class C extends g{static version=.220106;async updateActor(e){e.system.health.physical.bonus&&e.system.health.mental.bonus||(console.log("Conan2d20 System | Found Actor missing health bonus from previous schema. Migrating actor schema."),e.system.health.physical.bonus=0,e.system.health.mental.bonus=0)}}class f extends g{static version=.22040301;async updateItem(e){if("transportation"===e.type&&("number"==typeof e.system.stowage||"string"==typeof e.system.stowage)){console.log("Conan2d20 System | Found Item using old stowage schema. Migrating Item schema.");let t=parseInt(e.system.stowage);t=isNaN(t)?0:t,e.system.stowage={max:t,value:t}}}}class b extends g{static version=.22081201;async updateActor(e){if("npc"===e.type){delete e.system.isMinion,delete e.system.isToughened,delete e.system.isNemesis;const t=e.system.categories.value;t.includes("minion")&&(e.system.type="minion"),t.includes("toughened")&&(e.system.type="toughened"),t.includes("nemesis")&&(e.system.type="nemesis");const a=[];for(const t of e.system.categories.value)"minion"!==t&&"toughened"!==t&&"nemesis"!==t&&a.push(t);e.system.categories.value=a}}}class O extends g{static version=.22102901;async updateItem(e){"1each"===e.system.encumbrance&&(console.log('Conan2d20 System | Found Item using old "1each" encumbrance value. Migrating Item.'),e.system.encumbrance=1)}}class A extends g{static version=.22110501;async updateActor(e){e.system.health.mental.traumas.current&&(e.system.health.mental.traumas.value=e.system.health.mental.traumas.current,e.system.health.mental.traumas.current=null,e.system.health.mental.traumas.treated=null,console.log("Conan2d20 System | Migrating Actor mental health"))}}class v extends g{static version=.22120601;async updateItem(e){if("spell"===e.type||"enchantment"===e.type){const t=/^\s+|\s+$/g;for(const[,a]of Object.entries(e.system.effects.momentum))a.difficulty=a.difficulty.replace(t,""),a.effect=a.effect.replace(t,""),a.spend=a.spend.replace(t,""),a.type=a.type.replace(t,"");for(const[,a]of Object.entries(e.system.effects.alternative))a.difficulty=a.difficulty.replace(t,""),a.effect=a.effect.replace(t,""),a.spend=a.spend.replace(t,""),a.type=a.type.replace(t,"")}}}class k extends g{static version=.22122701;async updateItem(e){"kit"===e.type&&(e.system.quantity=1)}}class D{static list=[y,C,f,b,O,A,v,k];static get latestVersion(){return Math.max(...this.list.map((e=>e.version)))}static constructAll(){return this.list.map((e=>new e))}}const w=class{static addDots(e,t=0,a="status"){for(let a=0;a<t;a+=1)0===e.dots[a].length&&(e.dots[a]={status:"healed",icon:"far fa-circle"});return e}static getAttackDescription(e){const t={description:"CONAN.attack.default.description",success:"CONAN.attack.default.success",opt:{}};return(e?.system?.qualities?.value??[]).includes("improvised")?t.description="CONAN.attacks.improvised.description":"melee"===e?.system?.weaponType?t.description="CONAN.attacks.melee.description":"ranged"===e?.system?.weaponType?t.description="CONAN.attacks.ranged.description":"mental"===e?.system?.damage?.type&&(t.description=`${e?.system?.description?.value}`),t}static calculateArmor(e,t){let a;a=void 0===t?[]:t;const s={head:{soak:[0],qualities:[]},torso:{soak:[0],qualities:[]},larm:{soak:[0],qualities:[]},rarm:{soak:[0],qualities:[]},lleg:{soak:[0],qualities:[]},rleg:{soak:[0],qualities:[]},shield:{soak:[0]}};for(let e=0;e<a.length;e+=1)if(a[e].system.equipped&&!0!==a[e].system.broken)for(let t=0;t<a[e].system.qualities.value.length;t+=1)"shieldx"===a[e].system.qualities.value[t].type&&s.shield.soak.push(parseInt(a[e].system.qualities.value[t].value));for(let t=0;t<e.length;t+=1)if(e[t].system.equipped&&!0!==e[t].system.broken)for(let a=0;a<e[t].system.coverage.value.length;a+=1)"head"===e[t].system.coverage.value[a]?(s.head.soak.push(e[t].system.soak),e[t].system.qualities.value.length>0&&s.head.qualities.push(...e[t].system.qualities.value)):"torso"===e[t].system.coverage.value[a]?(s.torso.soak.push(e[t].system.soak),e[t].system.qualities.value.length>0&&s.torso.qualities.push(...e[t].system.qualities.value)):"larm"===e[t].system.coverage.value[a]?(s.larm.soak.push(e[t].system.soak),e[t].system.qualities.value.length>0&&s.larm.qualities.push(...e[t].system.qualities.value)):"rarm"===e[t].system.coverage.value[a]?(s.rarm.soak.push(e[t].system.soak),e[t].system.qualities.value.length>0&&s.rarm.qualities.push(...e[t].system.qualities.value)):"lleg"===e[t].system.coverage.value[a]?(s.lleg.soak.push(e[t].system.soak),e[t].system.qualities.value.length>0&&s.lleg.qualities.push(...e[t].system.qualities.value)):"rleg"===e[t].system.coverage.value[a]&&(s.rleg.soak.push(e[t].system.soak),e[t].system.qualities.value.length>0&&s.rleg.qualities.push(...e[t].system.qualities.value));const i={heavy:0,vheavy:0,noisy:0,other:[]};for(const e in s)if({}.hasOwnProperty.call(s,e)){s[e].soak.sort(((e,t)=>e-t)),s[e].soak.reverse();const t=[...new Set(s[e].qualities)];s[e].qualities=t;const a=s[e].soak.length;if(a>2&&s[e].qualities.includes("heavy"))for(let t=0;t<s[e].qualities.length;t+=1)"heavy"===s[e].qualities[t]&&(s[e].qualities[t]="vheavy");else a>2&&0===s[e].qualities.length&&s[e].qualities.push("heavy");for(let t=0;t<s[e].qualities.length;t+=1)if("heavy"===s[e].qualities[t])i.heavy+=1;else if("vheavy"===s[e].qualities[t])i.vheavy+=1;else if("noisy"===s[e].qualities[t])i.noisy+=1;else{i.other.push(s[e].qualities[t]);const a=[...new Set(i.other)];i.other=a}}return Object.assign(s,{qualityCount:i}),s}};class _ extends FormApplication{constructor(e,t){super(e,t),this.originalContainer=e.item.system.stowedIn,this.selectedContainer=e.item.system.stowedIn}static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{id:"transport-stowage",classes:["conan2d20","item","sheet"],template:"systems/conan2d20/templates/actors/stow-item.html",width:"auto"})}get title(){return`${game.i18n.localize("CONAN.stowItemTitle")}`}activateListeners(e){super.activateListeners(e),e.find(".stow-item").change((e=>{this.selectedContainer=e.target.value})),e.find(".stow-item-save").click((e=>this._onSave(e))),e.find(".stow-item-cancel").click((e=>this._onCancel(e)))}getData(){const e={itemName:this.object.item.name,stowedIn:this.object.item.system.stowedIn,containers:[{id:"",name:""}]},t=this.object.context.inventory.transportation;for(let a=0;a<t.items.length;a++)e.containers.push(t.items[a]);return e}_onCancel(){this.close()}_onSave(){if(this.selectedContainer!==this.originalContainer){const e=this.object.item.system.quantity||1;let t=parseInt(this.object.item.system.encumbrance)||0;if(t*=e,""!==this.originalContainer){let e=this.object.actor.getEmbeddedDocument("Item",this.originalContainer).system.stowage.value-t;e=e<0?0:e,this.object.actor.updateEmbeddedDocuments("Item",[{_id:this.originalContainer,"system.stowage.value":e}])}if(""!==this.selectedContainer){let e=this.object.actor.getEmbeddedDocument("Item",this.selectedContainer).system.stowage.value+t;this.object.actor.updateEmbeddedDocuments("Item",[{_id:this.selectedContainer,"system.stowage.value":e}])}this.object.actor.updateEmbeddedDocuments("Item",[{_id:this.object.item._id,"system.equipped":!1,"system.stowedIn":this.selectedContainer}])}this.close()}}class T extends FormApplication{constructor(e,t){super(e,t),this.searchString=null,this._filterTimeout=null}static get defaultOptions(){const e=super.defaultOptions;return e.id="trait-selector",e.classes=["conan2d20"],e.title="Actor Trait Selection",e.template="systems/conan2d20/templates/actors/trait-selector.html",e.width="auto",e.height=700,e.scrollY=[".trait-list"],e}get attribute(){return this.options.name}getData(){const e=getProperty(this.object,this.attribute);"string"==typeof e.value&&(e.value=T._backCompat(e.value,this.options.choices)),e.value||(e.value="");const{hasValues:t}=this.options,{hasExceptions:a}=this.options,s=duplicate(this.options.choices);if(t){const t=[];for(const[a,s]of Object.entries(e))t[s.type]={value:s.value,exceptions:s.exceptions};for(const[e,a]of Object.entries(s))s[e]=e in t?{label:a,chosen:!0,value:t[e].value||"",exceptions:t[e].exceptions||""}:{label:a,chosen:!1}}else for(const[t,a]of Object.entries(s))s[t]={label:a,chosen:e.value.includes(t)};const i={};return Object.keys(s).sort(((e,t)=>s[e].label.localeCompare(s[t].label))).forEach((e=>{i[e]=s[e]})),{orderedChoices:i,hasValues:t,hasExceptions:a,searchString:this.searchString,custom:e.custom}}search(e){const t=new RegExp(RegExp.escape(e),"i");this.element.find("li.trait-item").each(((e,a)=>{const s=a.getElementsByClassName("trait-label")[0].textContent;a.style.display=t.test(s)?"flex":"none"})),this.searchString=e}activateListeners(e){super.activateListeners(e),e.find('input[name="search"]').keyup(this._onFilterResults.bind(this)),this.searchString&&this.search(this.searchString),this.options.hasValues&&(e.find("input[id^=input_value]").focusin((t=>{const{name:a}=t.currentTarget;e.find(`input[type=checkbox][name="${a}"]`).prop("checked",!0)})),this.options.allowEmptyValues||e.find("input[id^=input_value]").focusout((t=>{const a=t.currentTarget;""===a.value&&e.find(`input[type=checkbox][name="${a.name}"]`).prop("checked",!1)}))),this.options.hasExceptions&&(e.find("input[id^=input_exception]").focusin((t=>{const{name:a}=t.currentTarget;e.find(`input[type=checkbox][name="${a}]"`).prop("checked",!0)})),e.find("input[id^=input_exception]").focusout((t=>{const a=t.currentTarget;""===e.find(`input[id=input_value][name="${a.name}"]`).val()&&e.find(`input[type=checkbox][name="${a.name}"]`).prop("checked",!1)})))}_onFilterResults(e){e.preventDefault();const t=e.currentTarget;this._filterTimeout&&(clearTimeout(this._filterTimeout),this._filterTimeout=null),this._filterTimeout=setTimeout((()=>this.search(t.value)),100)}static _backCompat(e,t){return e&&0!==e.length?(e=e.split(/[\s,]/).filter((e=>!!e))).map((e=>{for(const[a,s]of Object.entries(t))if(e===s)return a;return null})).filter((e=>!!e)):[]}async _updateObject(e,t){const a=[];if(this.options.hasValues){for(const[e,s]of Object.entries(t))if(s.length>1&&s[0]&&(!Number.isNaN(s[1])&&""!==s[1]||this.options.allowEmptyValues)){const t=this.options.choices[e],i=s[2]||"";a.push({type:e,label:t,value:s[1],exceptions:i})}await this.object.update({[`${this.attribute}`]:a}),await this.object.sheet.render(!0)}else{for(const[e,s]of Object.entries(t))"search"!==e&&s&&a.push(e);await this.object.update({[`${this.attribute}.value`]:a,[`${this.attribute}.custom`]:t.custom}),await this.object.sheet.render(!0)}}}class I extends ActorSheet{_hiddenTablesLut={standard:!0,minor:!0,reaction:!0,free:!0};static get defaultOptions(){return mergeObject(super.defaultOptions,{scrollY:[".sheet-sidebar",".skills-pane",".character-pane",".talents-pane",".inventory-pane",".actions-pane",".sheet-body"]})}async getData(e){const t=this.actor.toObject(),a=this.actor.toObject(!1),s={actor:a,attributes:CONFIG.CONAN.attributes,conditions:CONFIG.CONAN.conditionTypes,config:CONFIG.DND5E,cssClass:this.actor.isOwner?"editable":"locked",editable:this.isEditable,hiddenTables:this._hiddenTablesLut,isCharacter:"character"===this.actor.type,isNPC:"npc"===this.actor.type,items:a.items,languages:CONFIG.CONAN.languages,limited:this.actor.limited,natures:CONFIG.CONAN.naturesTypes,options:this.options,owner:this.actor.isOwner,source:t.system,system:a.system};if(void 0!==s.system.attributes)for(const[e,t]of Object.entries(s.system.attributes))t.label=CONFIG.CONAN.attributes[e],t.title=CONFIG.CONAN.attributeTitles[e];return this._prepareItems(s),this._addConditionData(s),s}activateListeners(e){super.activateListeners(e),e.find("[data-wpad]").each(((e,t)=>{const a=("INPUT"===t.tagName?t.value:t.innerText).length*parseInt(t.getAttribute("data-wpad"),10)/2;t.setAttribute("style",`flex: 0 0 ${a}px`)})),e.find(".item .item-name h4").click((e=>{this._onItemSummary(e)})),e.find(".hideable-items").click((e=>{this._onHideSection(e,".grid-container",".item-table")})),e.find(".hideable-skills").click((e=>{this._onHideSection(e,".grid-container",".skill-table")})),e.find(".hideable-inventory").click((e=>{this._onHideSection(e,".inventory-list",".item-list")})),e.find("[data-item-id].item .item-image-inventory").click((e=>this._onPostItem(e))),e.find("item-image-inventory").click((e=>this._onPostItem(e))),e.find(".item-toggle-equip").click((e=>{const t=$(e.currentTarget),a=t.parents(".item").attr("data-item-id"),s=!t.hasClass("active"),i=this.actor.items.get(a),n=i.system.stowedIn;if(""!==n){let e=parseInt(i.system.encumbrance)||0,t=this.actor.getEmbeddedDocument("Item",n).system.stowage.value-e;t=t<0?0:t,this.actor.updateEmbeddedDocuments("Item",[{_id:n,"system.stowage.value":t}])}this.actor.updateEmbeddedDocuments("Item",[{_id:a,"system.equipped":s,"system.stowedIn":""}])})),e.find(".item-toggle-broken").click((e=>{const t=$(e.currentTarget),a=t.parents(".item").attr("data-item-id"),s=t.hasClass("active");this.actor.updateEmbeddedDocuments("Item",[{_id:a,"system.broken":!s}])})),e.find(".trait-selector").click((e=>this._onTraitSelector(e))),e.find(".item-create").click((e=>this._onItemCreate(e))),e.find(".item-edit").click((e=>{const t=$(e.currentTarget).parents(".item").attr("data-item-id");return this.actor.items.get(t).sheet.render(!0)})),e.find(".add-gold").click((()=>{const e={};e["system.resources.gold.value"]=this.actor.system.resources.gold.value+1,this.actor.update(e)})),e.find(".subtract-gold").click((()=>{const e={};this.actor.system.resources.gold.value<=0||(e["system.resources.gold.value"]=this.actor.system.resources.gold.value-1,this.actor.update(e))})),e.find(".consumable-increase").click((e=>{const t=$(e.currentTarget).parents(".item").attr("data-item-id"),a=this.actor.getEmbeddedDocument("Item",t);this.actor.updateEmbeddedDocuments("Item",[{_id:t,"system.uses.value":Number(a.system.uses.value)+1}])})),e.find(".consumable-decrease").click((e=>{const t=$(e.currentTarget).parents(".item").attr("data-item-id"),a=this.actor.getEmbeddedDocument("Item",t);Number(a.system.uses.value)>0&&this.actor.updateEmbeddedDocuments("OwnedItem",[{_id:t,"system.uses.value":Number(a.system.uses.value)-1}])})),e.find(".mount-increase-pass").click((e=>{const t=$(e.currentTarget).parents(".item").attr("data-item-id"),a=this.actor.getEmbeddedDocument("Item",t);this.actor.updateEmbeddedDocuments("Item",[{_id:t,"system.passengers.current":Number(a.system.passengers.current)+1}])})),e.find(".mount-decrease-pass").click((e=>{const t=$(e.currentTarget).parents(".item").attr("data-item-id"),a=this.actor.getEmbeddedDocument("Item",t);Number(a.system.passengers.current)>0&&this.actor.updateEmbeddedDocuments("Item",[{_id:t,"system.passengers.current":Number(a.system.passengers.current)-1}])})),e.find(".item-increase-quantity").click((e=>{const t=$(e.currentTarget).parents(".item").attr("data-item-id"),a=this.actor.getEmbeddedDocument("Item",t);this.actor.updateEmbeddedDocuments("Item",[{_id:t,"system.quantity":Number(a.system.quantity)+1}]);const s=a.system.stowedIn;if(s&&""!==s){let e=parseInt(a.system.encumbrance)||0,t=this.actor.getEmbeddedDocument("Item",s).system.stowage.value+e;this.actor.updateEmbeddedDocuments("Item",[{_id:s,"system.stowage.value":t}])}})),e.find(".item-decrease-quantity").click((e=>{const t=$(e.currentTarget).parents(".item").attr("data-item-id"),a=this.actor.getEmbeddedDocument("Item",t);if(Number(a.system.quantity)>0){this.actor.updateEmbeddedDocuments("Item",[{_id:t,"system.quantity":Number(a.system.quantity)-1}]);const e=a.system.stowedIn;if(e&&""!==e){let t=parseInt(a.system.encumbrance)||0,s=this.actor.getEmbeddedDocument("Item",e).system.stowage.value-t;s=s<0?0:s,this.actor.updateEmbeddedDocuments("Item",[{_id:e,"system.stowage.value":s}])}}})),e.find(".item-decrease-uses").click((e=>{const t=$(e.currentTarget).parents(".item").attr("data-item-id"),a=this.actor.getEmbeddedDocument("Item",t);let s=Number(a.system.uses.value);s>0&&(s-=1,this.actor.updateEmbeddedDocuments("Item",[{_id:t,"system.uses.value":s}]))})),e.find(".item-increase-uses").click((e=>{const t=$(e.currentTarget).parents(".item").attr("data-item-id"),a=this.actor.getEmbeddedDocument("Item",t);let s=parseInt(a.system.uses.max);(isNaN(s)||a.system.uses.value<s)&&this.actor.updateEmbeddedDocuments("Item",[{_id:t,"system.uses.value":Number(a.system.uses.value)+1}])})),e.find(".item-delete").click((e=>this._onItemDelete(e))),e.find(".item-stowage-view").mouseup((e=>{0===e.button?this._onItemStowage(e,"stow"):2===e.button&&this._onItemStowage(e,"unstow")})),e.find(".fa-dice-d20.rollable").click((e=>{this._onRollSkillCheck(e)})),e.find(".skill-name.rollable").click((e=>{this._onRollSkillCheck(e)})),e.find(".wounds").on("click contextmenu",this._onClickWounded.bind(this))}_addConditionData(e){e.conditions=duplicate(game.conan2d20.config.statusEffects);for(const t of e.conditions){const e=this.actor.effects.find((e=>e.flags.core.statusId===t.id));e?(t.value=e.flags.conan2d20.value,t.existing=!0):t.value=0,null===t.flags.conan2d20.value&&(t.boolean=!0)}}_executeAttack(e,t){e.preventDefault(),e.stopPropagation();const a=this.actor.getEmbeddedDocument("Item",t);let s=a.skillToUse(this.actor.type);this._rollSkillCheck(s,a)}async _onClickWounded(e){e.preventDefault();const t=$(e.currentTarget).parent().attr("data-target"),a=$(e.currentTarget).attr("data-target"),s=duplicate(this.actor),i=getProperty(s,t);"click"===e.type?(setProperty(s,t,"wounded"),setProperty(s,a,"fas fa-skull")):"contextmenu"===e.type&&("wounded"===i?(setProperty(s,t,"treated"),setProperty(s,a,"fas fa-star-of-life")):"treated"===i&&(setProperty(s,t,"healed"),setProperty(s,a,"far fa-circle"))),this.actor.update(s)}_onTraitSelector(e){e.preventDefault();const t=$(e.currentTarget),a={name:t.parents("li").attr("for"),title:t.parent().parent().siblings("h4").text().trim(),choices:CONFIG.CONAN[t.attr("data-options")],hasValues:"true"===t.attr("data-has-values"),allowEmptyValues:"true"===t.attr("data-allow-empty-values"),hasExceptions:"true"===t.attr("data-has-exceptions")};new T(this.actor,a).render(!0)}_onHideSection(e,t,a){e.preventDefault();const s=$(e.currentTarget).parentsUntil(t).next(a),i=$(e.currentTarget).find("i"),n=s.attr("data-hideable-table-id");this._hiddenTablesLut[n]?this._hiddenTablesLut[n]=!this._hiddenTablesLut[n]:this._hiddenTablesLut[n]=!0,this._hiddenTablesLut[n]?s.slideUp(200):s.slideDown(200),i.toggleClass("fa-caret-down"),i.toggleClass("fa-caret-right")}_onItemCreate(e){e.preventDefault();const t=e.currentTarget,a=duplicate(t.dataset);"talent"===a.type?(a.name=`New ${a.talentType.capitalize()} ${a.type.capitalize()}`,mergeObject(a,{"system.talentType":a.talentType})):"action"===a.type?(a.name=`New ${a.actionType.capitalize()}`,mergeObject(a,{"system.actionType":a.actionType})):"npcaction"===a.type?("doom"===a.actionType?a.name=`New ${game.i18n.localize("CONAN.doomSpendHeader")}`:"abilities"===a.actionType&&(a.name=`New ${game.i18n.localize("CONAN.specialAbilityHeader").capitalize()}`),mergeObject(a,{"system.actionType":a.actionType})):"npcattack"===a.type?(a.name=`New ${game.i18n.localize("CONAN.attackHeader").capitalize()}`,mergeObject(a,{"system.actionType":a.actionType})):a.name=`New ${a.type.capitalize()}`,this.actor.createEmbeddedDocuments("Item",[a])}_onItemDelete(e){const t=$(e.currentTarget).parents(".item"),a=t.attr("data-item-id"),s=this.actor.getEmbeddedDocument("Item",a),i=this.actor.items;renderTemplate("systems/conan2d20/templates/actors/delete-item-dialog.html",{name:s.name}).then((e=>{new Dialog({title:"Confirm Deletion",content:e,buttons:{Yes:{icon:'<i class="fa fa-check"></i>',label:"Yes",callback:async()=>{if("transportation"===s.type)for(const e of i)e.canBeStowed&&e.system.stowedIn===a&&this.actor.updateEmbeddedDocuments("Item",[{_id:e.id,"system.stowedIn":""}]);await this.actor.deleteEmbeddedDocuments("Item",[a]),t.slideUp(200,(()=>this.render(!1)))}},Cancel:{icon:'<i class="fa fa-times"></i>',label:"Cancel"}},default:"Yes"}).render(!0)}))}async _onItemStowage(e,t){const a=$(e.currentTarget).parents(".item").attr("data-item-id"),s=this.actor.getEmbeddedDocument("Item",a),i=await this.getData(),n=i.inventory.transportation.items;"unstow"===t?this.actor.updateEmbeddedDocuments("Item",[{_id:a,"system.equipped":!1,"system.stowedIn":""}]):n.length>0?new _({actor:this.actor,context:i,item:s}).render(!0):ui.notifications.warn(game.i18n.localize("CONAN.stowItemNoTransportsAvailable"))}_onPostItem(e){e.preventDefault();const t=$(e.currentTarget).parents(".item").attr("data-item-id");this.actor.getEmbeddedDocument("Item",t).postItem(e)}_onRollSkillCheck(e){e.preventDefault();const t=$(e.currentTarget).parents(".skill-entry-name").attr("data-skill");this._rollSkillCheck(t)}async _onItemSummary(e){e.preventDefault();const t=game.i18n.localize.bind(game.i18n),a=$(e.currentTarget).parent().parent(),s=a.attr("data-item-id"),i=a.attr("data-action-index");let n;try{if(n=this.actor.getEmbeddedDocument("Item",s),!n.type)return}catch(e){return}if(a.hasClass("expanded")){const e=a.children(".item-summary");e.slideUp(200,(()=>e.remove()))}else{let e;const o=await n.getChatData({secrets:this.actor.isOwner});if(i){const a=w.getAttackDescription(n).description;e=$(`<div class="item-summary"><div class="item-description">${t(a)}</div></div>`)}else e=$(`<div class="item-summary"><div class="item-description">${o.description.value}</div></div>`);const l=$('<div class="item-details"></div>'),r=$('<div class="item-properties tags"></div>');o.itemDetails&&(o.itemDetails.forEach((e=>{const a=`<div class="chat-item-detail"><b>${t(e.label)}:</b> ${t(e.detail)} </div>`;l.append(a)})),e.append(l)),e.append("</br>"),o.properties&&o.properties.filter((e=>"string"==typeof e)).forEach((e=>{r.append(`<span class="tag tag_secondary">${t(e)}</span>`)})),e.append(r),o.qualities&&o.qualities.length&&o.qualities.forEach((e=>{e.description?r.append(`<span class="tag" title="${t(e.description)}">${t(e.label)}</span>`):r.append(`<span class="tag tag_alt">${t(e.label)}</span>`)}));const c=$('<div class="item-buttons"></div>');switch(n.type){case"action":o.weapon.value&&o.weapon.value&&c.append(`<button class="tag weapon_damage" data-action="weaponDamage">${t("CONAN.damageRollLabel")}</button>`);break;case"weapon":c.append(`<button class="tag weapon_damage execute-attack" data-action="weaponAttack">${t("CONAN.attackRollLabel")}</button>`),c.append(`<button class="tag weapon_damage execute-damage" data-action="weaponDamage">${t("CONAN.damageRollLabel")}</button>`),n.getSoak()>0&&c.append(`<button class="tag weapon_soak execute-soak" data-action="shieldSoak">${t("CONAN.shieldSoakRollLabel")}</button>`);break;case"display":c.append(`<button class="tag weapon_damage execute-attack" data-action="weaponAttack">${t("CONAN.attackRollLabel")}</button>`),c.append(`<button class="tag display_damage execute-damage" data-action="weaponDamage">${t("CONAN.damageRollLabel")}</button>`);break;case"kit":o.hasCharges&&c.append(`<span class="tag"><button class="consume" data-action="consume">${t("CONAN.kitUseLabel")} ${n.name}</button></span>`);break;case"npcattack":c.append(`<button class="tag npc_damage execute-attack" data-action="npcAttack">${t("CONAN.attackRollLabel")}</button>`),c.append(`<button class="tag npc_damage execute-damage" data-action="npcDamage">${t("CONAN.damageRollLabel")}</button>`);break;case"spell":c.append(`<button class="tag spell_attack execute-attack" data-action="spellCast">${t("CONAN.spellCastLabel")}</button>`)}e.append(c),c.find("button").click((e=>{switch(e.preventDefault(),e.stopPropagation(),e.target.dataset.action){case"consume":default:break;case"weaponDamage":case"npcDamage":this._executeDamage(e,s);break;case"weaponAttack":case"npcAttack":this._executeAttack(e,s);break;case"shieldSoak":this.actor.items.get(s).triggerSoakRoll();break;case"spellCast":{const e=this.actor.items.get(s),t="sor";this._rollSkillCheck(t,e);break}}})),a.append(e.hide()),e.slideDown(200)}a.toggleClass("expanded")}async _rollSkillCheck(e,t=null){const a="npc"===this.actor.type,s={attribute:a?CONFIG.expertiseAttributeMap[e]:CONFIG.skillAttributeMap[e],skill:a?null:e,expertise:a?e:null,item:t};new n(this.actor,s).render(!0)}_executeDamage(e,t){e.preventDefault(),e.stopPropagation(),this.actor.getEmbeddedDocument("Item",t).triggerDamageRoll()}}const x=I;class S{combinedEnc;encumberedAt;limit;constructor(e,t,a){this.combinedEnc=e,this.encumberedAt=t,this.limit=a}get encumberedPercentage(){const e=10*this.combinedEnc,t=10*this.limit;return Math.floor(e/t*100)}get limitPercentage(){const e=10*this.combinedEnc,t=10*this.limit;return Math.floor(e/t*100)}get limitPercentageMax(){return this.limitPercentage>100?100:this.limitPercentage}get isEncumbered(){return this.combinedEnc>this.encumberedAt}get encumbranceFactor(){const e=this.encumberedPercentage,t={carried:"",fatigue:""};return e<60&&e>=40?(t.carried=`${game.i18n.localize("CONAN.encumbranceCarriedRatingLabel")}: x2`,t.fatigue=`${game.i18n.localize("CONAN.encumbranceRatingFatigueLabel")}: +1`,t):e<80&&e>=60?(t.carried=`${game.i18n.localize("CONAN.encumbranceCarriedRatingLabel")}: x3`,t.fatigue=`${game.i18n.localize("CONAN.encumbranceRatingFatigueLabel")}: +2`,t):e<100&&e>=80?(t.carried=`${game.i18n.localize("CONAN.encumbranceCarriedRatingLabel")}: x4`,t.fatigue=`${game.i18n.localize("CONAN.encumbranceRatingFatigueLabel")}: +3`,t):e<120&&e>=100?(t.carried=`${game.i18n.localize("CONAN.encumbranceCarriedRatingLabel")}: x5`,t.fatigue=`${game.i18n.localize("CONAN.encumbranceRatingFatigueLabel")}: +4`,t):e<140&&e>=120?(t.carried=`${game.i18n.localize("CONAN.encumbranceCarriedRatingLabel")}: x6`,t.fatigue=`${game.i18n.localize("CONAN.encumbranceRatingFatigueLabel")}: +5`,t):e<160&&e>=140?(t.carried=`${game.i18n.localize("CONAN.encumbranceCarriedRatingLabel")}: x7`,t.fatigue=`${game.i18n.localize("CONAN.encumbranceRatingFatigueLabel")}: +6`,t):e>=160?(t.carried=`${game.i18n.localize("CONAN.encumbranceCarriedRatingLabel")}: x8`,t.fatigue=`${game.i18n.localize("CONAN.encumbranceRatingFatigueLabel")}: +7`,t):(t.carried=`${game.i18n.localize("CONAN.encumbranceCarriedRatingLabel")}: ${game.i18n.localize("CONAN.encumbranceRatingLessLabel")}`,t.fatigue=`${game.i18n.localize("CONAN.encumbranceRatingFatigueLabel")}: -`,t)}get isOverLimit(){return this.combinedEnc>this.limit}get enc(){return this.combinedEnc}}const F=class extends x{static get defaultOptions(){const e=super.defaultOptions;return mergeObject(e,{classes:e.classes.concat(["conan2d20","actor","pc","character-sheet"]),width:713,height:800,tabs:[{navSelector:".sheet-navigation",contentSelector:".sheet-content",initial:"character"}],dragDrop:[{dragSelector:".item-list .item",dropSelector:null}]}),e}get template(){const e="systems/conan2d20/templates/actors/";return!game.user.isGM&&this.actor.limited?`${e}readonly-sheet.html`:`${e}character-sheet.html`}async getData(e={}){const t=await super.getData(e);if(void 0!==t.system.skills)for(const[e,a]of Object.entries(t.system.skills))a.label=CONFIG.CONAN.skills[e];if(t.system.encumbrance=function(e,t){t=Number(t);const a=Math.floor(function(e){let t=0;for(const a in e)if("consumable"!==a&&"transportation"!==a)for(let s=0;s<e[a].items.length;s++){const i=e[a].items[s],n=i.system,o=i.canBeEquipped&&n.equipped;""===n.stowedIn&&("armor"===a&&o?(n.quantity||1)>1&&(t+=Number(n.encumbrance)*Number(n.quantity-1)):t+=Number(n.encumbrance)*Number(n.quantity))}return t}(e));return new S(a,2*t,5*t)}(t.inventory,t.system.attributes.bra.value),t.inventory.weapon.items.filter((e=>"shield"===e.system.group)).length>0){const e=t.inventory.weapon.items.filter((e=>"shield"===e.system.group));t.system.armor=w.calculateArmor(t.inventory.armor.items,e)}else t.system.armor=w.calculateArmor(t.inventory.armor.items,void 0);t.xpRemaining=t.system.resources.xp.value-t.system.resources.xp.spent,t.skills=CONFIG.CONAN.skills;let a=t.actor.system.background.languages.custom||"",s=a.split(";");return s=s.filter((e=>e)),this.actor.system.background.languages.value.forEach(((e,a)=>{"custom"!==e&&s.push(t.languages[e])})),s.concat(a),t.knownLanguages=s.sort(),t}getMaxResolve(e){return e.system.attributes.wil.value+e.system.skills.dis.expertise.value-e.system.health.mental.despair+e.system.health.mental.bonus}getMaxVigor(e){return e.system.attributes.bra.value+e.system.skills.res.expertise.value-e.system.health.physical.fatigue+e.system.health.physical.bonus}_prepareItems(e){const t={armor:{standardHeader:!0,canCreate:!0,label:game.i18n.localize("CONAN.inventoryArmorHeader"),items:[]},weapon:{canCreate:!0,standardHeader:!0,label:game.i18n.localize("CONAN.inventoryWeaponsHeader"),items:[]},kit:{canCreate:!0,standardHeader:!1,label:game.i18n.localize("CONAN.inventoryKitsHeader"),items:[]},consumable:{canCreate:!1,standardHeader:!1,label:game.i18n.localize("CONAN.inventoryConsumablesHeader"),items:[]},transportation:{canCreate:!0,standardHeader:!1,label:game.i18n.localize("CONAN.transpoHeader"),items:[]},miscellaneous:{canCreate:!0,standardHeader:!0,label:game.i18n.localize("CONAN.inventoryMiscHeader"),items:[]}},a=[],s={enchantment:{label:game.i18n.localize("CONAN.sorceryEnchantmentHeader"),sorcery:[]},spell:{label:game.i18n.localize("CONAN.sorcerySpellHeader"),sorcery:[]}},i={standard:{label:game.i18n.localize("CONAN.actionsStandardActionHeader"),actions:[]},minor:{label:game.i18n.localize("CONAN.actionsMinorActionHeader"),actions:[]},reaction:{label:game.i18n.localize("CONAN.actionsReactionsHeader"),actions:[]},free:{label:game.i18n.localize("CONAN.actionsFreeActionsHeader"),actions:[]}},n={interaction:{label:"Interaction Actions",actions:[]},defensive:{label:"Defensive Actions",actions:[]},offensive:{label:"Offensive Actions",actions:[]}},o=[],l={display:[],weapon:[]},r=[];(e.items??[]).forEach((e=>r.push(e))),r.sort(((e,t)=>e.name<t.name?-1:e.name>t.name?1:0));let c={};for(const a of r){if(a.img=a.img||DEFAULT_TOKEN,a.canBeStowed=!0,"armor"!==a.type&&"consumable"!==a.type&&"kit"!==a.type||(o.push(a),e.hasEquipment=!0),"armor"===a.type||"weapon"===a.type?(a.canBeEquipped=!0,a.canBeBroken=!0):(a.canBeEquipped=!1,a.canBeBroken=!1),a.system.equipped?a.isEquipped=!0:a.isEquipped=!1,"display"===a.type||"weapon"===a.type){const e={};e.imageUrl=a.img,e.name=a.name,e.type="attack";const t=w.getAttackDescription(a);e.description=t.description,e.success=t.success,e.qualities=[{name:"attack",label:game.i18n.localize(CONFIG.attacks[a.type])}],"weapon"===a.type&&e.qualities.push({name:"weaponType",label:CONFIG.weaponTypes[a.system.weaponType]},{name:"weapongroup",label:CONFIG.weaponGroups[a.system.group]??""}),a?.system?.qualities?.value?.map((t=>{const a=CONFIG.weaponQualities[t]??t;let s="";s=a.value?`${game.i18n.localize(a.label)}(${a.value})`:`${game.i18n.localize(a.label)}`,e.qualities.push({name:t,label:s,description:CONFIG.qualitiesDescriptions[a.type]||""})})),e.attack={},e.attack.id=a._id,e.attack.type=a.type,("display"===a.type||a.isEquipped)&&l[a.type].push(e)}if(Object.keys(t).includes(a.type)){if(a.system.quantity=a.system.quantity||0,a.system.encumbrance=a.system.encumbrance||0,a.hasCharges="kit"===a.type&&a.system.uses.max>0,"transportation"===a.type){a.canBeStowed=!1;const e=a.system.passengers;a.maxPassengersExceeded=e.current>e.capacity;const t=a.system.stowage;if(null===t.max)a.stowageExceeded=!1;else{const e=t.value||0;a.stowageExceeded=e>t.max}}if(a.canBeStowed&&a.system.stowedIn&&""!==a.system.stowedIn){const e=this.actor.getEmbeddedDocument("Item",a.system.stowedIn);a.stowedInName=e.name}t[a.type].items.push(a)}else if("talent"===a.type){const t=a.system.tree.toLowerCase()||"other";c[t]||(c[t]={label:t,ranks:0,talentCount:0,talents:[]}),c[t].talents.push(a),c[t].ranks+=a.system.rank.value,c[t].talentCount+=1;const s=a.system.actionType||"passive";if(Object.keys(i).includes(s))if(a.talent=!0,i[s].actions.push(a),a.system.actionCategory&&a.system.actionCategory)switch(a.system.actionCategory){case"interaction":n.interaction.actions.push(a),e.hasInteractionActions=!0;break;case"defensive":n.defensive.actions.push(a),e.hasDefensiveActions=!0;break;default:n.offensive.actions.push(a),e.hasOffensiveActions=!0}else n.offensive.actions.push(a),e.hasOffensiveActions=!0}else"spell"===a.type?s[a.type].sorcery.push(a):"enchantment"===a.type?(s[a.type].sorcery.push(a),t.consumable.items.push(a)):"transportation"===a.type?t.transportation.items.push(a):"miscellaneous"===a.type&&t.miscellaneous.items.push(a);if("npcaction"===a.type?(alert("NPC Action is not a valid item for player characters"),this.actor.deleteEmbeddedDocuments("Item",[a._id])):"npcattack"===a.type&&(alert("NPC Attack is not a valid item for player characters."),this.actor.deleteEmbeddedDocuments("Item",[a._id])),"action"===a.type){const t=a.system.actionType||"action";if("passive"===t)i.free.actions.push(a);else if(i[t].actions.push(a),a.system.actionCategory)switch(a.system.actionCategory){case"interaction":n.interaction.actions.push(a),e.hasInteractionActions=!0;break;case"defensive":n.defensive.actions.push(a),e.hasDefensiveActions=!0;break;default:n.offensive.actions.push(a),e.hasOffensiveActions=!0}else n.offensive.actions.push(a),e.hasOffensiveActions=!0}}Object.keys(c).sort().forEach((e=>{a.push(c[e])})),e.actions=i,e.attacks=l,e.inventory=t,e.readonlyactions=n,e.readonlyEquipment=o,e.sorcery=s,e.talents=a}_adjustDespair(e,t){let a=this.getMaxResolve(e);e.system.health.mental.despair+=t,a-=t,e.system.health.mental.despair<0?e.system.health.mental.despair=0:e.system.health.mental.value>a&&(e.system.health.mental.value=a,e.system.health.mental.max=a),game.actors.get(e._id).update(e)}_adjustFatigue(e,t){let a=this.getMaxVigor(e);e.system.health.physical.fatigue+=t,a-=t,e.system.health.physical.fatigue<0?e.system.health.physical.fatigue=0:e.system.health.physical.value>a&&(e.system.health.physical.value=a,e.system.health.physical.max=a),game.actors.get(e._id).update(e)}_adjustResolve(e,t){const a=this.getMaxResolve(e);e.system.health.mental.value+=t,e.system.health.mental.value<0?e.system.health.mental.value=0:e.system.health.mental.value>a&&(e.system.health.mental.value=a),game.actors.get(e._id).update(e)}_adjustResolveBonus(e,t){0===this.getMaxResolve(e)&&t<0||(e.system.health.mental.bonus+=t,e.system.health.mental.value+=t),game.actors.get(e._id).update(e)}_adjustVigor(e,t){const a=this.getMaxVigor(e);e.system.health.physical.value+=t,e.system.health.physical.value<0?e.system.health.physical.value=0:e.system.health.physical.value>a&&(e.system.health.physical.value=a),game.actors.get(e._id).update(e)}_adjustVigorBonus(e,t){0===this.getMaxVigor(e)&&t<0||(e.system.health.physical.bonus+=t,e.system.health.physical.value+=t),game.actors.get(e._id).update(e)}_resetDespair(e){e.system.health.mental.despair=0,game.actors.get(e._id).update(e)}_resetFatigue(e){e.system.health.physical.fatigue=0,game.actors.get(e._id).update(e)}_resetResolve(e){const t=this.getMaxResolve(e);e.system.health.mental.value=t,game.actors.get(e._id).update(e)}_resetResolveBonus(e){e.system.health.mental.bonus=0;const t=this.getMaxResolve(e);e.system.health.mental.value>t&&(e.system.health.mental.value=t),game.actors.get(e._id).update(e)}_resetVigor(e){const t=this.getMaxVigor(e);e.system.health.physical.value=t,game.actors.get(e._id).update(e)}_resetVigorBonus(e){e.system.health.physical.bonus=0;const t=this.getMaxVigor(e);e.system.health.physical.value>t&&(e.system.health.physical.value=t),game.actors.get(e._id).update(e)}activateListeners(e){super.activateListeners(e),this.options.editable&&(e.find(".condition-value").mouseup((e=>{const t=$(e.currentTarget).parents(".sheet-condition").attr("data-cond-id");0===e.button?this.actor.addCondition(t):2===e.button&&this.actor.removeCondition(t)})),e.find(".despair-tracker").mouseup((e=>{const t=duplicate(this.actor);0===e.button?window.event.ctrlKey?this._resetDespair(t):this._adjustDespair(t,1):2===e.button&&this._adjustDespair(t,-1)})),e.find(".despair-tracker").on("wheel",(e=>{const t=duplicate(this.actor);e.originalEvent.deltaY<0?this._adjustDespair(t,1):e.originalEvent.deltaY>0&&this._adjustDespair(t,-1)})),e.find(".fatigue-tracker").mouseup((e=>{const t=duplicate(this.actor);0===e.button?window.event.ctrlKey?this._resetFatigue(t):this._adjustFatigue(t,1):2===e.button&&this._adjustFatigue(t,-1)})),e.find(".fatigue-tracker").on("wheel",(e=>{const t=duplicate(this.actor);e.originalEvent.deltaY<0?this._adjustFatigue(t,1):e.originalEvent.deltaY>0&&this._adjustFatigue(t,-1)})),e.find(".resolve-max").mouseup((e=>{const t=duplicate(this.actor);0===e.button?window.event.ctrlKey?this._resetResolveBonus(t):this._adjustResolveBonus(t,1):2===e.button&&this._adjustResolveBonus(t,-1)})),e.find(".resolve-max").on("wheel",(e=>{const t=duplicate(this.actor);e.originalEvent.deltaY<0?this._adjustResolveBonus(t,1):e.originalEvent.deltaY>0&&this._adjustResolveBonus(t,-1)})),e.find(".resolve-value").mouseup((e=>{const t=duplicate(this.actor);0===e.button?window.event.ctrlKey?this._resetResolve(t):this._adjustResolve(t,1):2===e.button&&this._adjustResolve(t,-1)})),e.find(".resolve-value").on("wheel",(e=>{const t=duplicate(this.actor);e.originalEvent.deltaY<0?this._adjustResolve(t,1):e.originalEvent.deltaY>0&&this._adjustResolve(t,-1)})),e.find(".vigor-max").on("wheel",(e=>{const t=duplicate(this.actor);e.originalEvent.deltaY<0?this._adjustVigorBonus(t,1):e.originalEvent.deltaY>0&&this._adjustVigorBonus(t,-1)})),e.find(".vigor-max").mouseup((e=>{const t=duplicate(this.actor);0===e.button?window.event.ctrlKey?this._resetVigorBonus(t):this._adjustVigorBonus(t,1):2===e.button&&this._adjustVigorBonus(t,-1)})),e.find(".vigor-value").mouseup((e=>{const t=duplicate(this.actor);0===e.button?window.event.ctrlKey?this._resetVigor(t):this._adjustVigor(t,1):2===e.button&&this._adjustVigor(t,-1)})),e.find(".vigor-value").on("wheel",(e=>{const t=duplicate(this.actor);e.originalEvent.deltaY<0?this._adjustVigor(t,1):e.originalEvent.deltaY>0&&this._adjustVigor(t,-1)})),e.find(".condition-toggle").mouseup((e=>{const t=$(e.currentTarget).parents(".sheet-condition").attr("data-cond-id");null!==game.conan2d20.config.statusEffects.find((e=>e.id===t)).flags.conan2d20.value?0===e.button?this.actor.addCondition(t):2===e.button&&this.actor.removeCondition(t):this.actor.hasCondition(t)?this.actor.removeCondition(t):this.actor.addCondition(t)})),e.on("click",".bank-momentum",(()=>{(this.actor.isOwner||game.user.isGM)&&(this.actor.system.momentum<=0?ui.notifications.warn(game.i18n.localize("CONAN.noUnbankedMomentum")):new i(this.actor).render(!0))})))}},q=class extends x{static get defaultOptions(){const e=super.defaultOptions;return mergeObject(e,{classes:e.classes.concat(["conan2d20","actor","npc-sheet"]),width:460,height:680,resizable:!1,scrollY:[".sheet-content"]}),e}get template(){const e="systems/conan2d20/templates/actors/";return!game.user.isGM&&this.actor.limited?`${e}readonly-npc-sheet.html`:`${e}npc-sheet.html`}async getData(e={}){const t=await super.getData(e);if(t.flags=t.actor.flags,void 0!==t.system.skills)for(const[e,a]of Object.entries(t.system.skills))a.label=CONFIG.CONAN.expertiseFields[e];return delete t.system.isMinion,delete t.system.isNemesis,delete t.system.isToughened,t.npcTypes=CONFIG.CONAN.npcTypes,t.npcTraits=CONFIG.CONAN.npcTraits,t.skills=CONFIG.CONAN.expertiseFields,t}_prepareItems(e){const t={npcattack:{label:"NPC Attack",items:[]}},a={abilities:{label:game.i18n.localize("CONAN.npcActionTypes.abilities"),actions:[]},doom:{label:game.i18n.localize("CONAN.npcActionTypes.doom"),actions:[]}};for(const s of e.items){if(s.img=s.img||CONST.DEFAULT_TOKEN,Object.keys(t).includes(s.type)){if("npcattack"===s.type){let e;try{e=this.actor.getEmbeddedDocument("Item",s._id),s.chatData=e.getChatData({secrets:this.actor.isOwner})}catch(e){console.error(`Conan 2D20 System | NPC Sheet | Could not load item ${s.name}`)}t[s.type].items.push(s)}}else"npcaction"===s.type&&a[s.system.actionType||"npcaction"].actions.push(s);"npcattack"!==s.type&&"npcaction"!==s.type&&(console.log("Invalid item for non-player characters!"),this.actor.deleteEmbeddedDocuments("Item",[s.id]))}e.actions=a,e.attacks=t}};class R extends ItemSheet{static get defaultOptions(){const e=super.defaultOptions;return mergeObject(e,{classes:e.classes.concat(["conan2d20","item","sheet"]),width:760,height:500,template:"systems/conan2d20/templates/items/item-sheet.html",resizable:!1,tabs:[{navSelector:".sheet-tabs",contentSelector:".sheet-body",initial:"description"}]}),e}_getHeaderButtons(){let e=super._getHeaderButtons();return e=[{label:"Post",class:"post",icon:"fas fa-comment",onclick:e=>this.item.postItem(e)}].concat(e),e}getData(){const e=super.getData();e.attributes=CONFIG.CONAN.attributes;const{type:t}=this.item;if(mergeObject(e,{type:t,hasSidebar:!0,sidebarTemplate:()=>`systems/conan2d20/templates/items/${t}-sidebar.html`,hasDetails:["weapon","armor","talent","kit","action","display","enchantment","npcattack","npcaction","transportation"].includes(t),detailsTemplate:()=>`systems/conan2d20/templates/items/${t}-details.html`}),e.availability=CONFIG.CONAN.availabilityTypes,"armor"===t)e.armorQualities=CONFIG.CONAN.armorQualities,e.armorTypes=CONFIG.CONAN.armorTypes,e.coverageTypes=CONFIG.CONAN.coverageTypes;else if("weapon"===t){e.damageDice=CONFIG.CONAN.damageDice,e.weaponDamage=CONFIG.CONAN.weaponDamage,e.weaponGroups=CONFIG.CONAN.weaponGroups,e.weaponQualities=CONFIG.CONAN.weaponQualities,e.weaponRanges=CONFIG.CONAN.weaponRanges,e.weaponReaches=CONFIG.CONAN.weaponReaches,e.weaponSizes=CONFIG.CONAN.weaponSizes,e.weaponTypes=CONFIG.CONAN.weaponTypes;const t=[];for(let e in CONFIG.CONAN.skills)"oth"!==e&&t.push({key:e,name:CONFIG.CONAN.skills[e]});t.sort(((e,t)=>e.name<t.name?-1:e.name>t.name?1:0)),e.overrideSkills=t,this._prepareQualities(CONFIG.CONAN.weaponQualities)}else if("npcattack"===t)e.attackTypes=CONFIG.CONAN.npcAttackTypes,e.damageDice=CONFIG.CONAN.damageDice,e.damageTypes=CONFIG.CONAN.damageTypes,e.hasSidebar=!1,e.weaponDamage=CONFIG.CONAN.weaponDamage,e.weaponQualities=CONFIG.CONAN.weaponQualities,e.weaponRanges=CONFIG.CONAN.weaponRanges,e.weaponReaches=CONFIG.CONAN.weaponReaches,this._prepareQualities(CONFIG.CONAN.weaponQualities);else if("talent"===t)e.categories=CONFIG.CONAN.actionCategories,e.talentActionTypes=CONFIG.CONAN.actionTypes,e.talentSkills=CONFIG.CONAN.skills,e.talentTypes=CONFIG.CONAN.talentTypes;else if("transportation"===t)e.animals=CONFIG.CONAN.transpoAnimals,e.boatType=CONFIG.CONAN.transpoBoatTypes,e.capabilities=CONFIG.CONAN.transpoCapabilities,e.cartType=CONFIG.CONAN.transpoCartTypes,e.categories=CONFIG.CONAN.transpoCategories,e.mountType=CONFIG.CONAN.transpoMountTypes;else if("display"===t){e.displayQualities=CONFIG.CONAN.weaponQualities,e.displayRanges=CONFIG.CONAN.weaponRanges,e.displaySkills=CONFIG.CONAN.skills;const t=mergeObject(CONFIG.CONAN.damageDice,CONFIG.CONAN.displayDamageDice);e.damageDice=t,this._prepareQualities(CONFIG.CONAN.weaponQualities)}else if("action"===t){const t=[];if(this.actor)for(const e of this.actor.items)"weapon"===e.type&&t.push(e);e.actionCategories=CONFIG.CONAN.actionCategories,e.actionCounts=CONFIG.CONAN.actionCounts,e.actionTypes=CONFIG.CONAN.actionTypes,e.weapons=t}else"enchantment"===t?(e.blindingStrengths=CONFIG.CONAN.enchantmentBlindingStrengths,e.coverageTypes=CONFIG.CONAN.coverageTypes,e.damageDice=CONFIG.CONAN.damageDice,e.difficulty=CONFIG.CONAN.availabilityTypes,e.enchantmentEffects=CONFIG.CONAN.weaponQualities,e.enchantmentStrengths=CONFIG.CONAN.enchantmentStrengths,e.enchantmentTypes=CONFIG.CONAN.enchantmentTypes,e.explodingItems=CONFIG.CONAN.enchantmentExplodingItems,e.hasSidebar=!1,e.ingredient=CONFIG.CONAN.enchantmentIngredients,e.lotusPollenColors=CONFIG.CONAN.lotusPollenColors,e.lotusPollenForms=CONFIG.CONAN.lotusPollenForms,e.lotusPollenUses=CONFIG.CONAN.lotusPollenUses,e.talismanTypes=CONFIG.CONAN.enchantmentTalismanTypes,e.upasGlassSizes=CONFIG.CONAN.upasGlassSizes,e.volatilities=CONFIG.CONAN.enchantmentVolatilities):"spell"===t?(e.difficulty=CONFIG.CONAN.availabilityTypes,e.hasSidebar=!1):"miscellaneous"===t?e.hasSidebar=!0:"npcaction"===t?(e.actionTypes=CONFIG.CONAN.npcActionTypes,e.hasSidebar=!1):"kit"===t&&(e.kitSkills=CONFIG.CONAN.skills,e.kitTypes=CONFIG.CONAN.kitTypes,e.uses=CONFIG.CONAN.kitUses);return e}onTraitSelector(e){e.preventDefault();const t=$(e.currentTarget),a={name:t.parents("label").attr("for"),title:t.parent().text().trim(),choices:CONFIG.CONAN[t.attr("data-options")],hasValues:"true"===t.attr("data-has-values"),allowEmptyValues:"true"===t.attr("data-allow-empty-values")};new T(this.item,a).render(!0)}activateListeners(e){super.activateListeners(e),e.find('input[type="checkbox"]').change((e=>this._onSubmit(e))),e.find(".trait-selector").click((e=>this.onTraitSelector(e))),e.find(".spend-row-add").click((e=>this.insertSpendRow(e))),e.find(".alt-row-add").click((e=>this.insertAltRow(e))),e.find(".alt-row-delete").click((e=>this.deleteAltRow(e))),e.find(".spend-row-delete").click((e=>this.deleteSpendRow(e)))}_prepareQualities(e){if(void 0!==e)for(const[t,a]of Object.entries(e)){const s=e[t]||{value:[],selected:[]};if(Array.isArray(s)){s.selected={};for(const e of s)if("object"==typeof e){let t=`${a[e.type]}`;""!==e.value&&(t=`${t} (${e.value})`),s.selected[e.type]=t}else s.selected[e]=a[e]||`${e}`}else s.value&&(s.selected=s.value.reduce(((e,t)=>(e[t]=a[t],e)),{}));s.custom&&(s.selected.custom=s.custom)}}_onChangeInput(e){return this._onSubmit(e)}insertSpendRow(e){try{const e=document.getElementById("spellSpends"),t=this.item._id,a=`system.effects.momentum.${[e.rows.length-1+1]}`;this.item.update({id:t,[a]:{type:"",difficulty:"",effect:""}})}catch(e){alert(e)}}insertAltRow(e){try{const e=document.getElementById("altEffects"),t=this.item._id,a=`system.effects.alternative.${[e.rows.length-1+1]}`;this.item.update({id:t,[a]:{type:"",difficulty:"",effect:""}})}catch(e){alert(e)}}deleteAltRow(e){try{const e=`system.effects.alternative.-=${[document.getElementById("altEffects").rows.length-1]}`;this.item.update({[e]:null})}catch(e){alert(e)}}deleteSpendRow(e){try{const e=`system.effects.momentum.-=${[document.getElementById("spellSpends").rows.length-1]}`;this.item.update({[e]:null})}catch(e){alert(e)}}}class E extends FormApplication{constructor(e,t={}){super(e.data,t),this.objectType=e.constructor.name}static get defaultOptions(){const e=super.defaultOptions;return e.id="soak-form",e.classes=["conan2d20"],e.title="Area Soak",e.template="systems/conan2d20/templates/apps/morale-cover.html",e.width="300px",e.height="auto",e}async _updateObject(e,t){return t.id=this.object.id,canvas.scene.updateEmbeddedEntity(this.objectType,t)}}a(447),Hooks.once("init",(()=>{console.log("Conan2d20 | Initializing Robert E. Howard's Conan 2D20 System"),CONFIG.CONAN=e;for(const e in CONFIG.CONAN)Object.prototype.hasOwnProperty.call(CONFIG.CONAN,e)&&(CONFIG[e]=CONFIG.CONAN[e]);CONFIG.Item.documentClass=p,CONFIG.Actor.documentClass=s,CONFIG.CONAN.Counter=new t,CONFIG.CONAN.Dice={CombatDie:m},game.settings.register("conan2d20","worldSchemaVersion",{name:"Actor Schema Version",hint:"Records the schema version for Conan2d20 system actor data. (don't modify this unless you know what you are doing)",scope:"world",config:!0,default:0,type:Number}),game.settings.register("conan2d20","defaultTokenSettings",{name:"Default Token Settings",hint:"Automatically set advised token settings to newly created Actors.",scope:"world",config:!0,default:!0,type:Boolean}),game.settings.register("conan2d20","defaultTokenSettingsBar",{name:"Default Token Bar display",hint:"The setting for the default token's bar display",scope:"world",config:!0,default:CONST.TOKEN_DISPLAY_MODES.OWNER_HOVER,type:Number,choices:{[CONST.TOKEN_DISPLAY_MODES.NONE]:"Never Displayed",[CONST.TOKEN_DISPLAY_MODES.CONTROL]:"When Controlled",[CONST.TOKEN_DISPLAY_MODES.OWNER_HOVER]:"Hovered by Owner",[CONST.TOKEN_DISPLAY_MODES.HOVER]:"Hovered by Anyone",[CONST.TOKEN_DISPLAY_MODES.OWNER]:"Always for Owner",[CONST.TOKEN_DISPLAY_MODES.ALWAYS]:"Always for Anyone"}}),game.settings.register("conan2d20","defaultTokenSettingsName",{name:"Default Token Name display",hint:"The setting for the default token's name display",scope:"world",config:!0,default:CONST.TOKEN_DISPLAY_MODES.OWNER_HOVER,type:Number,choices:{[CONST.TOKEN_DISPLAY_MODES.NONE]:"Never Displayed",[CONST.TOKEN_DISPLAY_MODES.CONTROL]:"When Controlled",[CONST.TOKEN_DISPLAY_MODES.OWNER_HOVER]:"Hovered by Owner",[CONST.TOKEN_DISPLAY_MODES.HOVER]:"Hovered by Anyone",[CONST.TOKEN_DISPLAY_MODES.OWNER]:"Always for Owner",[CONST.TOKEN_DISPLAY_MODES.ALWAYS]:"Always for Anyone"}}),game.settings.register("conan2d20","playerCounterEdit",{name:"Allow Players To Edit Counters",hint:"Players will be able to change counter values manually.",scope:"world",config:!0,default:!1,type:Boolean}),game.settings.register("conan2d20","momentum",{name:"Momentum",scope:"world",config:!1,default:0,type:Number}),game.settings.register("conan2d20","doom",{name:"Doom",scope:"world",config:!1,default:0,type:Number}),loadTemplates(["systems/conan2d20/templates/actors/character-sheet.html","systems/conan2d20/templates/actors/delete-item-dialog.html","systems/conan2d20/templates/actors/main/actor-armor.html","systems/conan2d20/templates/actors/main/actor-details.html","systems/conan2d20/templates/actors/main/actor-header.html","systems/conan2d20/templates/actors/main/actor-health.html","systems/conan2d20/templates/actors/npc/actions.html","systems/conan2d20/templates/actors/npc/attacks.html","systems/conan2d20/templates/actors/npc/attributes.html","systems/conan2d20/templates/actors/npc/fields.html","systems/conan2d20/templates/actors/npc/health.html","systems/conan2d20/templates/actors/npc/mob.html","systems/conan2d20/templates/actors/npc/type.html","systems/conan2d20/templates/actors/stow-item.html","systems/conan2d20/templates/actors/tabs/actor-actions.html","systems/conan2d20/templates/actors/tabs/actor-biography.html","systems/conan2d20/templates/actors/tabs/actor-character.html","systems/conan2d20/templates/actors/tabs/actor-inventory.html","systems/conan2d20/templates/actors/tabs/actor-notes.html","systems/conan2d20/templates/actors/tabs/actor-skills.html","systems/conan2d20/templates/actors/tabs/actor-spells.html","systems/conan2d20/templates/actors/tabs/actor-talents.html","systems/conan2d20/templates/actors/tabs/item-line.html","systems/conan2d20/templates/actors/tabs/npcattack-line.html","systems/conan2d20/templates/apps/fortune-roll-dialogue.html","systems/conan2d20/templates/items/action-details.html","systems/conan2d20/templates/items/action-sidebar.html","systems/conan2d20/templates/items/armor-details.html","systems/conan2d20/templates/items/armor-sidebar.html","systems/conan2d20/templates/items/display-details.html","systems/conan2d20/templates/items/display-sidebar.html","systems/conan2d20/templates/items/enchantment-details.html","systems/conan2d20/templates/items/item-sheet.html","systems/conan2d20/templates/items/kit-details.html","systems/conan2d20/templates/items/kit-sidebar.html","systems/conan2d20/templates/items/miscellaneous-sidebar.html","systems/conan2d20/templates/items/npcaction-details.html","systems/conan2d20/templates/items/npcattack-details.html","systems/conan2d20/templates/items/npcattack-sidebar.html","systems/conan2d20/templates/items/spell-sheet.html","systems/conan2d20/templates/items/talent-details.html","systems/conan2d20/templates/items/talent-sidebar.html","systems/conan2d20/templates/items/transportation-details.html","systems/conan2d20/templates/items/transportation-sidebar.html","systems/conan2d20/templates/items/weapon-details.html","systems/conan2d20/templates/items/weapon-sidebar.html"]),Actors.unregisterSheet("core",ActorSheet),Actors.registerSheet("conan2d20",F,{types:["character"],makeDefault:!0}),Actors.registerSheet("conan2d20",q,{types:["npc"],makeDefault:!0}),Items.unregisterSheet("core",ItemSheet),Items.registerSheet("conan2d20",R,{makeDefault:!0}),Handlebars.registerHelper("add",((e,t)=>e+t)),Handlebars.registerHelper("multiply",((e,t)=>e*t)),Handlebars.registerHelper("if_all",(function(){const e=[].slice.apply(arguments),t=e.pop();let{fn:a}=t;for(let s=0;s<e.length;s+=1)if(!e[s]){a=t.inverse;break}return a(this)})),Handlebars.registerHelper("ifEq",(function(e,t,a){return e===t?a.fn(this):a.inverse(this)})),Handlebars.registerHelper("ifCond",(function(e,t,a,s){switch(t){case"==":case"===":return e===a?s.fn(this):s.inverse(this);case"!=":case"!==":return e!==a?s.fn(this):s.inverse(this);case"<":return e<a?s.fn(this):s.inverse(this);case"<=":return e<=a?s.fn(this):s.inverse(this);case">":return e>a?s.fn(this):s.inverse(this);case">=":return e>=a?s.fn(this):s.inverse(this);case"&&":return e&&a?s.fn(this):s.inverse(this);case"||":return e||a?s.fn(this):s.inverse(this);default:return s.inverse(this)}})),Handlebars.registerHelper("ifObjIndex",(function(e,t,a){return e[t]?a.fn(this):a.inverse(this)})),game.conan2d20={config:e,macros:d}})),Hooks.once("setup",(()=>{for(const e in game.conan2d20.config)if({}.hasOwnProperty.call(game.conan2d20.config,e))for(const t in game.conan2d20.config[e])({}).hasOwnProperty.call(game.conan2d20.config[e],t)&&"string"==typeof game.conan2d20.config[e][t]&&(game.conan2d20.config[e][t]=game.i18n.localize(game.conan2d20.config[e][t]))})),Hooks.on("ready",(()=>{console.log("Conan2d20 System | Readying Robert E. Howards Conan 2D20 System");const e=game.settings.get("conan2d20","worldSchemaVersion");if(game.user.isGM){const t=new N(D.constructAll());t.needsMigration()&&(e&&e<.031421&&ui.notifications.error("Your Conan2d20 system data is from too old a Foundry version and cannot be reliably migrated to the latest version. The process will be attempted, but errors may occur."),t.runMigration())}CONFIG.CONAN.Counter.render(!0),CONFIG.Dice.terms.p=m,TokenHUD.prototype._onToggleEffect=function(e,{overlay:t=!1}={}){e.preventDefault();const a=e.currentTarget,s=a.dataset.statusId&&this.object.actor?CONFIG.statusEffects.find((e=>e.id===a.dataset.statusId)):a.getAttribute("src");return 0===e.button?this.object.incrementCondition(s):2===e.button?this.object.decrementCondition(s):void 0},Token.prototype.incrementCondition=async function(e,{active:t,overlay:a=!1}={}){const s=this.actor.effects.find((t=>t.flags.core.statusId===e.id));return!s||Number.isNumeric(getProperty(s,"flags.conan2d20.value"))?this.actor.addCondition(e.id):s&&this.actor.removeCondition(e.id),this.hasActiveHUD&&canvas.tokens.hud.refreshStatusIcons(),t},Token.prototype.decrementCondition=async function(e,{active:t,overlay:a=!1}={}){return this.actor.removeCondition(e.id),this.hasActiveHUD&&canvas.tokens.hud.refreshStatusIcons(),t},game.socket.on("system.conan2d20",(e=>{"setCounter"===e.type&&game.user.isGM&&t.setCounter(e.payload.value,e.payload.type),"updateCounter"===e.type&&CONFIG.CONAN.Counter.render(!0)})),Hooks.on("hotbarDrop",((e,t,a)=>{if("Item"===t.type)return game.conan2d20.macros.createItemMacro(t,a),!1}))})),Hooks.on("renderChatMessage",((e,t,a)=>{hasProperty(a,"message.flags.conan2d20.itemData")&&t[0].addEventListener("dragstart",(e=>{e.dataTransfer.setData("text/plain",JSON.stringify({type:"item-drag",payload:a.message.flags.conan2d20.itemData}))})),getProperty(e,"flags.conan2d20.effects")&&t.find("h4.dice-total").append(` (${e.data.flags.conan2d20.effects} <img class="effect-total" src='systems/conan2d20/assets/dice/phoenix/phoenix-black.png'>)`)})),Hooks.on("renderBasePlaceableHUD",((e,t)=>{if(e.object instanceof Drawing||e.object instanceof Tile){const a=$('<div class=\'control-icon\'><img src="systems/conan2d20/assets/dice/phoenix/phoenix-white.png" width="36" height="36"></div>');a.attr("title","Left Click to roll Morale and Soak\nRight Click to configure Morale or Cover"),a.mousedown((t=>{if(0===t.button){const t=CONFIG.CONAN.soakDice[getProperty(e.object,"data.flags.conan2d20.soak.morale")],a=CONFIG.CONAN.soakDice[getProperty(e.object,"data.flags.conan2d20.soak.cover")];t&&new Roll(t).roll().toMessage({flavor:game.i18n.localize("CONAN.soakMorale")}),a&&new Roll(a).roll().toMessage({flavor:game.i18n.localize("CONAN.soakCover")}),t||a||ui.notifications.warn("No area soak. Right click to configure.")}else 2===t.button&&new E(e.object).render(!0)})),t.find(".col.right").append(a)}})),Hooks.once("diceSoNiceReady",(e=>{e.addSystem({id:"conan2d20black",name:"Conan 2d20 - Black"},"default"),e.addSystem({id:"conan2d20white",name:"Conan 2d20 - White"},!1),e.addDicePreset({type:"d20",labels:["systems/conan2d20/assets/dice/phoenix/phoenix-black.png","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"],bumpMaps:["systems/conan2d20/assets/dice/phoenix/phoenixBump.png",,,,,,,,,,,,,,,,,,,,],system:"conan2d20black"}),e.addDicePreset({type:"d20",labels:["systems/conan2d20/assets/dice/phoenix/phoenix-white.png","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"],bumpMaps:["systems/conan2d20/assets/dice/phoenix/phoenixBump.png",,,,,,,,,,,,,,,,,,,,],system:"conan2d20white"}),e.addDicePreset({type:"dp",labels:["systems/conan2d20/assets/dice/combat/black/Combat1.png","systems/conan2d20/assets/dice/combat/black/Combat2.png","systems/conan2d20/assets/dice/combat/black/Combat3.png","systems/conan2d20/assets/dice/combat/black/Combat4.png","systems/conan2d20/assets/dice/combat/black/Combat5.png","systems/conan2d20/assets/dice/combat/black/Combat6.png"],bumpMaps:["systems/conan2d20/assets/dice/combat/black/Combat1.png","systems/conan2d20/assets/dice/combat/black/Combat2.png","systems/conan2d20/assets/dice/combat/black/Combat3.png","systems/conan2d20/assets/dice/combat/black/Combat4.png","systems/conan2d20/assets/dice/combat/black/Combat5.png","systems/conan2d20/assets/dice/combat/black/Combat6.png"],system:"conan2d20black"}),e.addDicePreset({type:"dp",labels:["systems/conan2d20/assets/dice/combat/white/Combat1.png","systems/conan2d20/assets/dice/combat/white/Combat2.png","systems/conan2d20/assets/dice/combat/white/Combat3.png","systems/conan2d20/assets/dice/combat/white/Combat4.png","systems/conan2d20/assets/dice/combat/white/Combat5.png","systems/conan2d20/assets/dice/combat/white/Combat6.png"],bumpMaps:["systems/conan2d20/assets/dice/combat/white/Combat1.png","systems/conan2d20/assets/dice/combat/white/Combat2.png","systems/conan2d20/assets/dice/combat/white/Combat3.png","systems/conan2d20/assets/dice/combat/white/Combat4.png","systems/conan2d20/assets/dice/combat/white/Combat5.png","systems/conan2d20/assets/dice/combat/white/Combat6.png"],system:"conan2d20white"})}))})()})();